diff --git a/src/ffmpeg/AVUtil/v56/LIBAVUTIL.jl b/src/ffmpeg/AVUtil/v56/LIBAVUTIL.jl
index 4f49174..d3c41c8 100644
--- a/src/ffmpeg/AVUtil/v56/LIBAVUTIL.jl
+++ b/src/ffmpeg/AVUtil/v56/LIBAVUTIL.jl
@@ -1,3 +1,4 @@
+include("../../../util.jl")
 include("libavutil_h.jl")
 
 #include("aes_ctr.jl")
@@ -27,12 +28,12 @@ include("libavutil_h.jl")
 #include("hwcontext_vdpau.jl")
 #include("hwcontext_videotoolbox.jl")
 #include("imgutils.jl")
-#include("log.jl")
+include("log.jl")
 #include("mastering_display_metadata.jl")
-#include("mem.jl")
+include("mem.jl")
 #include("motion_vector.jl")
 #include("opt.jl")
-#include("pixdesc.jl")
+include("pixdesc.jl")
 #include("pixelutils.jl")
 #include("pixfmt.jl")
 #include("rational.jl")
@@ -48,3 +49,16 @@ include("libavutil_h.jl")
 #include("twofish.jl")
 #include("version.jl")
 #include("xtea.jl")
+
+function AVFrame()
+  ts = AVFrame.types
+  parms = [T <: Ptr ? C_NULL : zero(T) for T in ts]
+
+  fmt_pos = fieldposition(AVFrame, :format)
+  parms[fmt_pos] = -one(ts[fmt_pos])
+
+  pts_pos = fieldposition(AVFrame, :pts)
+  parms[pts_pos] = AV_NOPTS_VALUE
+
+  AVFrame(parms...)
+end
\ No newline at end of file
diff --git a/src/ffmpeg/AVUtil/v56/libavutil_h.jl b/src/ffmpeg/AVUtil/v56/libavutil_h.jl
index 41e8a8a..6bf2797 100644
--- a/src/ffmpeg/AVUtil/v56/libavutil_h.jl
+++ b/src/ffmpeg/AVUtil/v56/libavutil_h.jl
@@ -1,10 +1,13 @@
 # Automatically generated using Clang.jl wrap_c, version 0.0.0
 
+import Base.zero
+
 
 export
     unix,
     linux,
     AV_TIME_BASE,
+    AV_NOPTS_VALUE,
     AV_FOURCC_MAX_STRING_SIZE,
     AVMediaType,
     AVMEDIA_TYPE_UNKNOWN,
@@ -558,10 +561,10 @@ export
     AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS,
     AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE,
     AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES,
-    AVVAAPIDeviceContext,
-    AVVAAPIFramesContext,
-    AVVAAPIHWConfig,
-    AVVDPAUDeviceContext,
+    # AVVAAPIDeviceContext,
+    # AVVAAPIFramesContext,
+    # AVVAAPIHWConfig,
+    # AVVDPAUDeviceContext,
     AVMasteringDisplayMetadata,
     AVContentLightMetadata,
     AVMotionVector,
@@ -629,11 +632,19 @@ const FF_QP2LAMBDA = 118
 const FF_LAMBDA_MAX = 256 * 128 - 1
 const FF_QUALITY_SCALE = FF_LAMBDA_SCALE
 
-# Skipping MacroDefinition: AV_NOPTS_VALUE ( ( int64_t ) UINT64_C ( 0x8000000000000000 ) )
+const AV_NOPTS_VALUE  =  reinterpret(Int64, 0x8000000000000000)
 
 const AV_TIME_BASE = 1000000
 
-# Skipping MacroDefinition: AV_TIME_BASE_Q ( AVRational ) { 1 , AV_TIME_BASE }
+struct AVRational
+    num::Cint
+    den::Cint
+end
+
+zero(::Type{AVRational}) = AVRational(0, 1)
+
+const AV_TIME_BASE_Q  =  AVRational(1, AV_TIME_BASE)
+
 # Skipping MacroDefinition: av_int_list_length ( list , term ) av_int_list_length_for_size ( sizeof ( * ( list ) ) , list , term )
 
 const AV_FOURCC_MAX_STRING_SIZE = 32
@@ -750,11 +761,6 @@ struct AVFrameSideData
     buf::Ptr{AVBufferRef}
 end
 
-struct AVRational
-    num::Cint
-    den::Cint
-end
-
 # begin enum AVColorRange
 const AVColorRange = UInt32
 const AVCOL_RANGE_UNSPECIFIED = 0 |> UInt32
@@ -842,6 +848,9 @@ const AVCHROMA_LOC_BOTTOM = 6 |> UInt32
 const AVCHROMA_LOC_NB = 7 |> UInt32
 # end enum AVChromaLocation
 
+zero(::Type{NTuple{N,P}}) where {N,P<:Ptr} = (N == 1 ? (C_NULL,) : (zero(NTuple{N-1,P})..., C_NULL))
+zero(::Type{NTuple{N,T}}) where {N,T} = (N == 1 ? (zero(T),) : (zero(NTuple{N-1,T})..., zero(T)))
+
 struct AVFrame
     data::NTuple{8, Ptr{UInt8}}
     linesize::NTuple{8, Cint}
@@ -1058,76 +1067,6 @@ end
 const AVPALETTE_SIZE = 1024
 const AVPALETTE_COUNT = 256
 
-# Skipping MacroDefinition: AV_PIX_FMT_NE ( be , le ) AV_PIX_FMT_ ## le
-# Skipping MacroDefinition: AV_PIX_FMT_RGB32 AV_PIX_FMT_NE ( ARGB , BGRA )
-# Skipping MacroDefinition: AV_PIX_FMT_RGB32_1 AV_PIX_FMT_NE ( RGBA , ABGR )
-# Skipping MacroDefinition: AV_PIX_FMT_BGR32 AV_PIX_FMT_NE ( ABGR , RGBA )
-# Skipping MacroDefinition: AV_PIX_FMT_BGR32_1 AV_PIX_FMT_NE ( BGRA , ARGB )
-# Skipping MacroDefinition: AV_PIX_FMT_0RGB32 AV_PIX_FMT_NE ( 0RGB , BGR0 )
-# Skipping MacroDefinition: AV_PIX_FMT_0BGR32 AV_PIX_FMT_NE ( 0BGR , RGB0 )
-# Skipping MacroDefinition: AV_PIX_FMT_GRAY9 AV_PIX_FMT_NE ( GRAY9BE , GRAY9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GRAY10 AV_PIX_FMT_NE ( GRAY10BE , GRAY10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GRAY12 AV_PIX_FMT_NE ( GRAY12BE , GRAY12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GRAY14 AV_PIX_FMT_NE ( GRAY14BE , GRAY14LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GRAY16 AV_PIX_FMT_NE ( GRAY16BE , GRAY16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YA16 AV_PIX_FMT_NE ( YA16BE , YA16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_RGB48 AV_PIX_FMT_NE ( RGB48BE , RGB48LE )
-# Skipping MacroDefinition: AV_PIX_FMT_RGB565 AV_PIX_FMT_NE ( RGB565BE , RGB565LE )
-# Skipping MacroDefinition: AV_PIX_FMT_RGB555 AV_PIX_FMT_NE ( RGB555BE , RGB555LE )
-# Skipping MacroDefinition: AV_PIX_FMT_RGB444 AV_PIX_FMT_NE ( RGB444BE , RGB444LE )
-# Skipping MacroDefinition: AV_PIX_FMT_RGBA64 AV_PIX_FMT_NE ( RGBA64BE , RGBA64LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BGR48 AV_PIX_FMT_NE ( BGR48BE , BGR48LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BGR565 AV_PIX_FMT_NE ( BGR565BE , BGR565LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BGR555 AV_PIX_FMT_NE ( BGR555BE , BGR555LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BGR444 AV_PIX_FMT_NE ( BGR444BE , BGR444LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BGRA64 AV_PIX_FMT_NE ( BGRA64BE , BGRA64LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV420P9 AV_PIX_FMT_NE ( YUV420P9BE , YUV420P9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV422P9 AV_PIX_FMT_NE ( YUV422P9BE , YUV422P9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV444P9 AV_PIX_FMT_NE ( YUV444P9BE , YUV444P9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV420P10 AV_PIX_FMT_NE ( YUV420P10BE , YUV420P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV422P10 AV_PIX_FMT_NE ( YUV422P10BE , YUV422P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV440P10 AV_PIX_FMT_NE ( YUV440P10BE , YUV440P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV444P10 AV_PIX_FMT_NE ( YUV444P10BE , YUV444P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV420P12 AV_PIX_FMT_NE ( YUV420P12BE , YUV420P12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV422P12 AV_PIX_FMT_NE ( YUV422P12BE , YUV422P12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV440P12 AV_PIX_FMT_NE ( YUV440P12BE , YUV440P12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV444P12 AV_PIX_FMT_NE ( YUV444P12BE , YUV444P12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV420P14 AV_PIX_FMT_NE ( YUV420P14BE , YUV420P14LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV422P14 AV_PIX_FMT_NE ( YUV422P14BE , YUV422P14LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV444P14 AV_PIX_FMT_NE ( YUV444P14BE , YUV444P14LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV420P16 AV_PIX_FMT_NE ( YUV420P16BE , YUV420P16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV422P16 AV_PIX_FMT_NE ( YUV422P16BE , YUV422P16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUV444P16 AV_PIX_FMT_NE ( YUV444P16BE , YUV444P16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRP9 AV_PIX_FMT_NE ( GBRP9BE , GBRP9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRP10 AV_PIX_FMT_NE ( GBRP10BE , GBRP10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRP12 AV_PIX_FMT_NE ( GBRP12BE , GBRP12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRP14 AV_PIX_FMT_NE ( GBRP14BE , GBRP14LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRP16 AV_PIX_FMT_NE ( GBRP16BE , GBRP16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRAP10 AV_PIX_FMT_NE ( GBRAP10BE , GBRAP10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRAP12 AV_PIX_FMT_NE ( GBRAP12BE , GBRAP12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRAP16 AV_PIX_FMT_NE ( GBRAP16BE , GBRAP16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BAYER_BGGR16 AV_PIX_FMT_NE ( BAYER_BGGR16BE , BAYER_BGGR16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BAYER_RGGB16 AV_PIX_FMT_NE ( BAYER_RGGB16BE , BAYER_RGGB16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BAYER_GBRG16 AV_PIX_FMT_NE ( BAYER_GBRG16BE , BAYER_GBRG16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_BAYER_GRBG16 AV_PIX_FMT_NE ( BAYER_GRBG16BE , BAYER_GRBG16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRPF32 AV_PIX_FMT_NE ( GBRPF32BE , GBRPF32LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GBRAPF32 AV_PIX_FMT_NE ( GBRAPF32BE , GBRAPF32LE )
-# Skipping MacroDefinition: AV_PIX_FMT_GRAYF32 AV_PIX_FMT_NE ( GRAYF32BE , GRAYF32LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA420P9 AV_PIX_FMT_NE ( YUVA420P9BE , YUVA420P9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA422P9 AV_PIX_FMT_NE ( YUVA422P9BE , YUVA422P9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA444P9 AV_PIX_FMT_NE ( YUVA444P9BE , YUVA444P9LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA420P10 AV_PIX_FMT_NE ( YUVA420P10BE , YUVA420P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA422P10 AV_PIX_FMT_NE ( YUVA422P10BE , YUVA422P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA444P10 AV_PIX_FMT_NE ( YUVA444P10BE , YUVA444P10LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA420P16 AV_PIX_FMT_NE ( YUVA420P16BE , YUVA420P16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA422P16 AV_PIX_FMT_NE ( YUVA422P16BE , YUVA422P16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_YUVA444P16 AV_PIX_FMT_NE ( YUVA444P16BE , YUVA444P16LE )
-# Skipping MacroDefinition: AV_PIX_FMT_XYZ12 AV_PIX_FMT_NE ( XYZ12BE , XYZ12LE )
-# Skipping MacroDefinition: AV_PIX_FMT_NV20 AV_PIX_FMT_NE ( NV20BE , NV20LE )
-# Skipping MacroDefinition: AV_PIX_FMT_AYUV64 AV_PIX_FMT_NE ( AYUV64BE , AYUV64LE )
-# Skipping MacroDefinition: AV_PIX_FMT_P010 AV_PIX_FMT_NE ( P010BE , P010LE )
-# Skipping MacroDefinition: AV_PIX_FMT_P016 AV_PIX_FMT_NE ( P016BE , P016LE )
-
 # begin enum AVPixelFormat
 const AVPixelFormat = Cint
 const AV_PIX_FMT_NONE = -1 |> Int32
@@ -1325,6 +1264,165 @@ const AV_PIX_FMT_GRAYF32LE = 186 |> Int32
 const AV_PIX_FMT_NB = 187 |> Int32
 # end enum AVPixelFormat
 
+macro AV_PIX_FMT_NE(be, le)
+    Symbol("AV_PIX_FMT_"*string(le))
+end
+const AV_PIX_FMT_RGB32 = @AV_PIX_FMT_NE(ARGB, BGRA)
+const AV_PIX_FMT_RGB32_1 = @AV_PIX_FMT_NE(RGBA, ABGR)
+const AV_PIX_FMT_BGR32 = @AV_PIX_FMT_NE(ABGR, RGBA)
+const AV_PIX_FMT_BGR32_1 = @AV_PIX_FMT_NE(BGRA, ARGB)
+const AV_PIX_FMT_0RGB32 = @AV_PIX_FMT_NE(0RGB, BGR0)
+const AV_PIX_FMT_0BGR32 = @AV_PIX_FMT_NE(0BGR, RGB0)
+const AV_PIX_FMT_GRAY9 = @AV_PIX_FMT_NE(GRAY9BE, GRAY9LE)
+const AV_PIX_FMT_GRAY10 = @AV_PIX_FMT_NE(GRAY10BE, GRAY10LE)
+const AV_PIX_FMT_GRAY12 = @AV_PIX_FMT_NE(GRAY12BE, GRAY12LE)
+const AV_PIX_FMT_GRAY14 = @AV_PIX_FMT_NE(GRAY14BE, GRAY14LE)
+const AV_PIX_FMT_GRAY16 = @AV_PIX_FMT_NE(GRAY16BE, GRAY16LE)
+const AV_PIX_FMT_YA16 = @AV_PIX_FMT_NE(YA16BE, YA16LE)
+const AV_PIX_FMT_RGB48 = @AV_PIX_FMT_NE(RGB48BE, RGB48LE)
+const AV_PIX_FMT_RGB565 = @AV_PIX_FMT_NE(RGB565BE, RGB565LE)
+const AV_PIX_FMT_RGB555 = @AV_PIX_FMT_NE(RGB555BE, RGB555LE)
+const AV_PIX_FMT_RGB444 = @AV_PIX_FMT_NE(RGB444BE, RGB444LE)
+const AV_PIX_FMT_RGBA64 = @AV_PIX_FMT_NE(RGBA64BE, RGBA64LE)
+const AV_PIX_FMT_BGR48 = @AV_PIX_FMT_NE(BGR48BE, BGR48LE)
+const AV_PIX_FMT_BGR565 = @AV_PIX_FMT_NE(BGR565BE, BGR565LE)
+const AV_PIX_FMT_BGR555 = @AV_PIX_FMT_NE(BGR555BE, BGR555LE)
+const AV_PIX_FMT_BGR444 = @AV_PIX_FMT_NE(BGR444BE, BGR444LE)
+const AV_PIX_FMT_BGRA64 = @AV_PIX_FMT_NE(BGRA64BE, BGRA64LE)
+const AV_PIX_FMT_YUV420P9 = @AV_PIX_FMT_NE(YUV420P9BE, YUV420P9LE)
+const AV_PIX_FMT_YUV422P9 = @AV_PIX_FMT_NE(YUV422P9BE, YUV422P9LE)
+const AV_PIX_FMT_YUV444P9 = @AV_PIX_FMT_NE(YUV444P9BE, YUV444P9LE)
+const AV_PIX_FMT_YUV420P10 = @AV_PIX_FMT_NE(YUV420P10BE, YUV420P10LE)
+const AV_PIX_FMT_YUV422P10 = @AV_PIX_FMT_NE(YUV422P10BE, YUV422P10LE)
+const AV_PIX_FMT_YUV440P10 = @AV_PIX_FMT_NE(YUV440P10BE, YUV440P10LE)
+const AV_PIX_FMT_YUV444P10 = @AV_PIX_FMT_NE(YUV444P10BE, YUV444P10LE)
+const AV_PIX_FMT_YUV420P12 = @AV_PIX_FMT_NE(YUV420P12BE, YUV420P12LE)
+const AV_PIX_FMT_YUV422P12 = @AV_PIX_FMT_NE(YUV422P12BE, YUV422P12LE)
+const AV_PIX_FMT_YUV440P12 = @AV_PIX_FMT_NE(YUV440P12BE, YUV440P12LE)
+const AV_PIX_FMT_YUV444P12 = @AV_PIX_FMT_NE(YUV444P12BE, YUV444P12LE)
+const AV_PIX_FMT_YUV420P14 = @AV_PIX_FMT_NE(YUV420P14BE, YUV420P14LE)
+const AV_PIX_FMT_YUV422P14 = @AV_PIX_FMT_NE(YUV422P14BE, YUV422P14LE)
+const AV_PIX_FMT_YUV444P14 = @AV_PIX_FMT_NE(YUV444P14BE, YUV444P14LE)
+const AV_PIX_FMT_YUV420P16 = @AV_PIX_FMT_NE(YUV420P16BE, YUV420P16LE)
+const AV_PIX_FMT_YUV422P16 = @AV_PIX_FMT_NE(YUV422P16BE, YUV422P16LE)
+const AV_PIX_FMT_YUV444P16 = @AV_PIX_FMT_NE(YUV444P16BE, YUV444P16LE)
+const AV_PIX_FMT_GBRP9 = @AV_PIX_FMT_NE(GBRP9BE, GBRP9LE)
+const AV_PIX_FMT_GBRP10 = @AV_PIX_FMT_NE(GBRP10BE, GBRP10LE)
+const AV_PIX_FMT_GBRP12 = @AV_PIX_FMT_NE(GBRP12BE, GBRP12LE)
+const AV_PIX_FMT_GBRP14 = @AV_PIX_FMT_NE(GBRP14BE, GBRP14LE)
+const AV_PIX_FMT_GBRP16 = @AV_PIX_FMT_NE(GBRP16BE, GBRP16LE)
+const AV_PIX_FMT_GBRAP10 = @AV_PIX_FMT_NE(GBRAP10BE, GBRAP10LE)
+const AV_PIX_FMT_GBRAP12 = @AV_PIX_FMT_NE(GBRAP12BE, GBRAP12LE)
+const AV_PIX_FMT_GBRAP16 = @AV_PIX_FMT_NE(GBRAP16BE, GBRAP16LE)
+const AV_PIX_FMT_BAYER_BGGR16 = @AV_PIX_FMT_NE(BAYER_BGGR16BE, BAYER_BGGR16LE)
+const AV_PIX_FMT_BAYER_RGGB16 = @AV_PIX_FMT_NE(BAYER_RGGB16BE, BAYER_RGGB16LE)
+const AV_PIX_FMT_BAYER_GBRG16 = @AV_PIX_FMT_NE(BAYER_GBRG16BE, BAYER_GBRG16LE)
+const AV_PIX_FMT_BAYER_GRBG16 = @AV_PIX_FMT_NE(BAYER_GRBG16BE, BAYER_GRBG16LE)
+const AV_PIX_FMT_GBRPF32 = @AV_PIX_FMT_NE(GBRPF32BE, GBRPF32LE)
+const AV_PIX_FMT_GBRAPF32 = @AV_PIX_FMT_NE(GBRAPF32BE, GBRAPF32LE)
+const AV_PIX_FMT_GRAYF32 = @AV_PIX_FMT_NE(GRAYF32BE, GRAYF32LE)
+const AV_PIX_FMT_YUVA420P9 = @AV_PIX_FMT_NE(YUVA420P9BE, YUVA420P9LE)
+const AV_PIX_FMT_YUVA422P9 = @AV_PIX_FMT_NE(YUVA422P9BE, YUVA422P9LE)
+const AV_PIX_FMT_YUVA444P9 = @AV_PIX_FMT_NE(YUVA444P9BE, YUVA444P9LE)
+const AV_PIX_FMT_YUVA420P10 = @AV_PIX_FMT_NE(YUVA420P10BE, YUVA420P10LE)
+const AV_PIX_FMT_YUVA422P10 = @AV_PIX_FMT_NE(YUVA422P10BE, YUVA422P10LE)
+const AV_PIX_FMT_YUVA444P10 = @AV_PIX_FMT_NE(YUVA444P10BE, YUVA444P10LE)
+const AV_PIX_FMT_YUVA420P16 = @AV_PIX_FMT_NE(YUVA420P16BE, YUVA420P16LE)
+const AV_PIX_FMT_YUVA422P16 = @AV_PIX_FMT_NE(YUVA422P16BE, YUVA422P16LE)
+const AV_PIX_FMT_YUVA444P16 = @AV_PIX_FMT_NE(YUVA444P16BE, YUVA444P16LE)
+const AV_PIX_FMT_XYZ12 = @AV_PIX_FMT_NE(XYZ12BE, XYZ12LE)
+const AV_PIX_FMT_NV20 = @AV_PIX_FMT_NE(NV20BE, NV20LE)
+const AV_PIX_FMT_AYUV64 = @AV_PIX_FMT_NE(AYUV64BE, AYUV64LE)
+const AV_PIX_FMT_P010 = @AV_PIX_FMT_NE(P010BE, P010LE)
+const AV_PIX_FMT_P016 = @AV_PIX_FMT_NE(P016BE, P016LE)
+
+# begin enum AVColorPrimaries
+const AVColorPrimaries = UInt32
+const AVCOL_PRI_RESERVED0 = 0 |> UInt32
+const AVCOL_PRI_BT709 = 1 |> UInt32
+const AVCOL_PRI_UNSPECIFIED = 2 |> UInt32
+const AVCOL_PRI_RESERVED = 3 |> UInt32
+const AVCOL_PRI_BT470M = 4 |> UInt32
+const AVCOL_PRI_BT470BG = 5 |> UInt32
+const AVCOL_PRI_SMPTE170M = 6 |> UInt32
+const AVCOL_PRI_SMPTE240M = 7 |> UInt32
+const AVCOL_PRI_FILM = 8 |> UInt32
+const AVCOL_PRI_BT2020 = 9 |> UInt32
+const AVCOL_PRI_SMPTE428 = 10 |> UInt32
+const AVCOL_PRI_SMPTEST428_1 = 10 |> UInt32
+const AVCOL_PRI_SMPTE431 = 11 |> UInt32
+const AVCOL_PRI_SMPTE432 = 12 |> UInt32
+const AVCOL_PRI_JEDEC_P22 = 22 |> UInt32
+const AVCOL_PRI_NB = 23 |> UInt32
+# end enum AVColorPrimaries
+
+# begin enum AVColorTransferCharacteristic
+const AVColorTransferCharacteristic = UInt32
+const AVCOL_TRC_RESERVED0 = 0 |> UInt32
+const AVCOL_TRC_BT709 = 1 |> UInt32
+const AVCOL_TRC_UNSPECIFIED = 2 |> UInt32
+const AVCOL_TRC_RESERVED = 3 |> UInt32
+const AVCOL_TRC_GAMMA22 = 4 |> UInt32
+const AVCOL_TRC_GAMMA28 = 5 |> UInt32
+const AVCOL_TRC_SMPTE170M = 6 |> UInt32
+const AVCOL_TRC_SMPTE240M = 7 |> UInt32
+const AVCOL_TRC_LINEAR = 8 |> UInt32
+const AVCOL_TRC_LOG = 9 |> UInt32
+const AVCOL_TRC_LOG_SQRT = 10 |> UInt32
+const AVCOL_TRC_IEC61966_2_4 = 11 |> UInt32
+const AVCOL_TRC_BT1361_ECG = 12 |> UInt32
+const AVCOL_TRC_IEC61966_2_1 = 13 |> UInt32
+const AVCOL_TRC_BT2020_10 = 14 |> UInt32
+const AVCOL_TRC_BT2020_12 = 15 |> UInt32
+const AVCOL_TRC_SMPTE2084 = 16 |> UInt32
+const AVCOL_TRC_SMPTEST2084 = 16 |> UInt32
+const AVCOL_TRC_SMPTE428 = 17 |> UInt32
+const AVCOL_TRC_SMPTEST428_1 = 17 |> UInt32
+const AVCOL_TRC_ARIB_STD_B67 = 18 |> UInt32
+const AVCOL_TRC_NB = 19 |> UInt32
+# end enum AVColorTransferCharacteristic
+
+# begin enum AVColorSpace
+const AVColorSpace = UInt32
+const AVCOL_SPC_RGB = 0 |> UInt32
+const AVCOL_SPC_BT709 = 1 |> UInt32
+const AVCOL_SPC_UNSPECIFIED = 2 |> UInt32
+const AVCOL_SPC_RESERVED = 3 |> UInt32
+const AVCOL_SPC_FCC = 4 |> UInt32
+const AVCOL_SPC_BT470BG = 5 |> UInt32
+const AVCOL_SPC_SMPTE170M = 6 |> UInt32
+const AVCOL_SPC_SMPTE240M = 7 |> UInt32
+const AVCOL_SPC_YCGCO = 8 |> UInt32
+const AVCOL_SPC_YCOCG = 8 |> UInt32
+const AVCOL_SPC_BT2020_NCL = 9 |> UInt32
+const AVCOL_SPC_BT2020_CL = 10 |> UInt32
+const AVCOL_SPC_SMPTE2085 = 11 |> UInt32
+const AVCOL_SPC_CHROMA_DERIVED_NCL = 12 |> UInt32
+const AVCOL_SPC_CHROMA_DERIVED_CL = 13 |> UInt32
+const AVCOL_SPC_ICTCP = 14 |> UInt32
+const AVCOL_SPC_NB = 15 |> UInt32
+# end enum AVColorSpace
+
+# begin enum AVColorRange
+const AVColorRange = UInt32
+const AVCOL_RANGE_UNSPECIFIED = 0 |> UInt32
+const AVCOL_RANGE_MPEG = 1 |> UInt32
+const AVCOL_RANGE_JPEG = 2 |> UInt32
+const AVCOL_RANGE_NB = 3 |> UInt32
+# end enum AVColorRange
+
+# begin enum AVChromaLocation
+const AVChromaLocation = UInt32
+const AVCHROMA_LOC_UNSPECIFIED = 0 |> UInt32
+const AVCHROMA_LOC_LEFT = 1 |> UInt32
+const AVCHROMA_LOC_CENTER = 2 |> UInt32
+const AVCHROMA_LOC_TOPLEFT = 3 |> UInt32
+const AVCHROMA_LOC_TOP = 4 |> UInt32
+const AVCHROMA_LOC_BOTTOMLEFT = 5 |> UInt32
+const AVCHROMA_LOC_BOTTOM = 6 |> UInt32
+const AVCHROMA_LOC_NB = 7 |> UInt32
+# end enum AVChromaLocation
+
 # begin enum AVSampleFormat
 const AVSampleFormat = Cint
 const AV_SAMPLE_FMT_NONE = -1 |> Int32
@@ -1357,7 +1455,7 @@ const LIBAVUTIL_VERSION_MICRO = 100
 # Skipping MacroDefinition: LIBAVUTIL_VERSION_INT AV_VERSION_INT ( LIBAVUTIL_VERSION_MAJOR , LIBAVUTIL_VERSION_MINOR , LIBAVUTIL_VERSION_MICRO )
 # Skipping MacroDefinition: LIBAVUTIL_VERSION AV_VERSION ( LIBAVUTIL_VERSION_MAJOR , LIBAVUTIL_VERSION_MINOR , LIBAVUTIL_VERSION_MICRO )
 
-const LIBAVUTIL_BUILD = LIBAVUTIL_VERSION_INT
+# const LIBAVUTIL_BUILD = LIBAVUTIL_VERSION_INT
 
 # Skipping MacroDefinition: LIBAVUTIL_IDENT "Lavu" AV_STRINGIFY ( LIBAVUTIL_VERSION )
 # Skipping MacroDefinition: FF_API_VAAPI ( LIBAVUTIL_VERSION_MAJOR < 57 )
@@ -1676,26 +1774,26 @@ const AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE = 4 |> UInt32
 const AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES = 8 |> UInt32
 # end enum ANONYMOUS_5
 
-struct AVVAAPIDeviceContext
-    display::VADisplay
-    driver_quirks::UInt32
-end
-
-struct AVVAAPIFramesContext
-    attributes::Ptr{VASurfaceAttrib}
-    nb_attributes::Cint
-    surface_ids::Ptr{VASurfaceID}
-    nb_surfaces::Cint
-end
-
-struct AVVAAPIHWConfig
-    config_id::VAConfigID
-end
-
-struct AVVDPAUDeviceContext
-    device::VdpDevice
-    get_proc_address::Ptr{VdpGetProcAddress}
-end
+# struct AVVAAPIDeviceContext
+#     display::VADisplay
+#     driver_quirks::UInt32
+# end
+
+# struct AVVAAPIFramesContext
+#     attributes::Ptr{VASurfaceAttrib}
+#     nb_attributes::Cint
+#     surface_ids::Ptr{VASurfaceID}
+#     nb_surfaces::Cint
+# end
+
+# struct AVVAAPIHWConfig
+#     config_id::VAConfigID
+# end
+
+# struct AVVDPAUDeviceContext
+#     device::VdpDevice
+#     get_proc_address::Ptr{VdpGetProcAddress}
+# end
 
 struct AVMasteringDisplayMetadata
     display_primaries::NTuple{3, NTuple{2, AVRational}}
diff --git a/src/ffmpeg/AVUtil/v56/log.jl b/src/ffmpeg/AVUtil/v56/log.jl
index 0b1f57a..1bffa51 100644
--- a/src/ffmpeg/AVUtil/v56/log.jl
+++ b/src/ffmpeg/AVUtil/v56/log.jl
@@ -16,9 +16,9 @@ export
     av_log_get_flags
 
 
-function av_vlog(avcl, level::Integer, fmt, vl)
-    ccall((:av_vlog, libavutil), Cvoid, (Ptr{Cvoid}, Cint, Cstring, va_list), avcl, level, fmt, vl)
-end
+# function av_vlog(avcl, level::Integer, fmt, vl)
+#     ccall((:av_vlog, libavutil), Cvoid, (Ptr{Cvoid}, Cint, Cstring, va_list), avcl, level, fmt, vl)
+# end
 
 function av_log_get_level()
     ccall((:av_log_get_level, libavutil), Cint, ())
@@ -32,9 +32,9 @@ function av_log_set_callback(callback)
     ccall((:av_log_set_callback, libavutil), Cvoid, (Ptr{Cvoid},), callback)
 end
 
-function av_log_default_callback(avcl, level::Integer, fmt, vl)
-    ccall((:av_log_default_callback, libavutil), Cvoid, (Ptr{Cvoid}, Cint, Cstring, va_list), avcl, level, fmt, vl)
-end
+# function av_log_default_callback(avcl, level::Integer, fmt, vl)
+#     ccall((:av_log_default_callback, libavutil), Cvoid, (Ptr{Cvoid}, Cint, Cstring, va_list), avcl, level, fmt, vl)
+# end
 
 function av_default_item_name(ctx)
     ccall((:av_default_item_name, libavutil), Cstring, (Ptr{Cvoid},), ctx)
@@ -44,13 +44,13 @@ function av_default_get_category(ptr)
     ccall((:av_default_get_category, libavutil), AVClassCategory, (Ptr{Cvoid},), ptr)
 end
 
-function av_log_format_line(ptr, level::Integer, fmt, vl, line, line_size::Integer, print_prefix)
-    ccall((:av_log_format_line, libavutil), Cvoid, (Ptr{Cvoid}, Cint, Cstring, va_list, Cstring, Cint, Ptr{Cint}), ptr, level, fmt, vl, line, line_size, print_prefix)
-end
+# function av_log_format_line(ptr, level::Integer, fmt, vl, line, line_size::Integer, print_prefix)
+#     ccall((:av_log_format_line, libavutil), Cvoid, (Ptr{Cvoid}, Cint, Cstring, va_list, Cstring, Cint, Ptr{Cint}), ptr, level, fmt, vl, line, line_size, print_prefix)
+# end
 
-function av_log_format_line2(ptr, level::Integer, fmt, vl, line, line_size::Integer, print_prefix)
-    ccall((:av_log_format_line2, libavutil), Cint, (Ptr{Cvoid}, Cint, Cstring, va_list, Cstring, Cint, Ptr{Cint}), ptr, level, fmt, vl, line, line_size, print_prefix)
-end
+# function av_log_format_line2(ptr, level::Integer, fmt, vl, line, line_size::Integer, print_prefix)
+#     ccall((:av_log_format_line2, libavutil), Cint, (Ptr{Cvoid}, Cint, Cstring, va_list, Cstring, Cint, Ptr{Cint}), ptr, level, fmt, vl, line, line_size, print_prefix)
+# end
 
 function av_log_set_flags(arg::Integer)
     ccall((:av_log_set_flags, libavutil), Cvoid, (Cint,), arg)
