# Automatically generated using Clang.jl wrap_c, version 0.0.0

import Base.zero


export
    unix,
    linux,
    AV_TIME_BASE,
    AV_NOPTS_VALUE,
    AV_FOURCC_MAX_STRING_SIZE,
    AVMediaType,
    AVMEDIA_TYPE_UNKNOWN,
    AVMEDIA_TYPE_VIDEO,
    AVMEDIA_TYPE_AUDIO,
    AVMEDIA_TYPE_DATA,
    AVMEDIA_TYPE_SUBTITLE,
    AVMEDIA_TYPE_ATTACHMENT,
    AVMEDIA_TYPE_NB,
    AVPictureType,
    AV_PICTURE_TYPE_NONE,
    AV_PICTURE_TYPE_I,
    AV_PICTURE_TYPE_P,
    AV_PICTURE_TYPE_B,
    AV_PICTURE_TYPE_S,
    AV_PICTURE_TYPE_SI,
    AV_PICTURE_TYPE_SP,
    AV_PICTURE_TYPE_BI,
    AV_BUFFER_FLAG_READONLY,
    AVBuffer,
    AVBufferRef,
    AVBufferPool,
    AV_DICT_MATCH_CASE,
    AV_DICT_IGNORE_SUFFIX,
    AV_DICT_DONT_STRDUP_KEY,
    AV_DICT_DONT_STRDUP_VAL,
    AV_DICT_DONT_OVERWRITE,
    AV_DICT_APPEND,
    AV_DICT_MULTIKEY,
    AVDictionaryEntry,
    AVDictionary,
    AVFifoBuffer,
    AV_NUM_DATA_POINTERS,
    AV_FRAME_FLAG_CORRUPT,
    AV_FRAME_FLAG_DISCARD,
    AVFrameSideDataType,
    AV_FRAME_DATA_PANSCAN,
    AV_FRAME_DATA_A53_CC,
    AV_FRAME_DATA_STEREO3D,
    AV_FRAME_DATA_MATRIXENCODING,
    AV_FRAME_DATA_DOWNMIX_INFO,
    AV_FRAME_DATA_REPLAYGAIN,
    AV_FRAME_DATA_DISPLAYMATRIX,
    AV_FRAME_DATA_AFD,
    AV_FRAME_DATA_MOTION_VECTORS,
    AV_FRAME_DATA_SKIP_SAMPLES,
    AV_FRAME_DATA_AUDIO_SERVICE_TYPE,
    AV_FRAME_DATA_MASTERING_DISPLAY_METADATA,
    AV_FRAME_DATA_GOP_TIMECODE,
    AV_FRAME_DATA_SPHERICAL,
    AV_FRAME_DATA_CONTENT_LIGHT_LEVEL,
    AV_FRAME_DATA_ICC_PROFILE,
    AV_FRAME_DATA_QP_TABLE_PROPERTIES,
    AV_FRAME_DATA_QP_TABLE_DATA,
    AV_FRAME_DATA_S12M_TIMECODE,
    AVActiveFormatDescription,
    AV_AFD_SAME,
    AV_AFD_4_3,
    AV_AFD_16_9,
    AV_AFD_14_9,
    AV_AFD_4_3_SP_14_9,
    AV_AFD_16_9_SP_14_9,
    AV_AFD_SP_4_3,
    AVFrameSideData,
    AVRational,
    AVColorRange,
    AVCOL_RANGE_UNSPECIFIED,
    AVCOL_RANGE_MPEG,
    AVCOL_RANGE_JPEG,
    AVCOL_RANGE_NB,
    AVColorPrimaries,
    AVCOL_PRI_RESERVED0,
    AVCOL_PRI_BT709,
    AVCOL_PRI_UNSPECIFIED,
    AVCOL_PRI_RESERVED,
    AVCOL_PRI_BT470M,
    AVCOL_PRI_BT470BG,
    AVCOL_PRI_SMPTE170M,
    AVCOL_PRI_SMPTE240M,
    AVCOL_PRI_FILM,
    AVCOL_PRI_BT2020,
    AVCOL_PRI_SMPTE428,
    AVCOL_PRI_SMPTEST428_1,
    AVCOL_PRI_SMPTE431,
    AVCOL_PRI_SMPTE432,
    AVCOL_PRI_JEDEC_P22,
    AVCOL_PRI_NB,
    AVColorTransferCharacteristic,
    AVCOL_TRC_RESERVED0,
    AVCOL_TRC_BT709,
    AVCOL_TRC_UNSPECIFIED,
    AVCOL_TRC_RESERVED,
    AVCOL_TRC_GAMMA22,
    AVCOL_TRC_GAMMA28,
    AVCOL_TRC_SMPTE170M,
    AVCOL_TRC_SMPTE240M,
    AVCOL_TRC_LINEAR,
    AVCOL_TRC_LOG,
    AVCOL_TRC_LOG_SQRT,
    AVCOL_TRC_IEC61966_2_4,
    AVCOL_TRC_BT1361_ECG,
    AVCOL_TRC_IEC61966_2_1,
    AVCOL_TRC_BT2020_10,
    AVCOL_TRC_BT2020_12,
    AVCOL_TRC_SMPTE2084,
    AVCOL_TRC_SMPTEST2084,
    AVCOL_TRC_SMPTE428,
    AVCOL_TRC_SMPTEST428_1,
    AVCOL_TRC_ARIB_STD_B67,
    AVCOL_TRC_NB,
    AVColorSpace,
    AVCOL_SPC_RGB,
    AVCOL_SPC_BT709,
    AVCOL_SPC_UNSPECIFIED,
    AVCOL_SPC_RESERVED,
    AVCOL_SPC_FCC,
    AVCOL_SPC_BT470BG,
    AVCOL_SPC_SMPTE170M,
    AVCOL_SPC_SMPTE240M,
    AVCOL_SPC_YCGCO,
    AVCOL_SPC_YCOCG,
    AVCOL_SPC_BT2020_NCL,
    AVCOL_SPC_BT2020_CL,
    AVCOL_SPC_SMPTE2085,
    AVCOL_SPC_CHROMA_DERIVED_NCL,
    AVCOL_SPC_CHROMA_DERIVED_CL,
    AVCOL_SPC_ICTCP,
    AVCOL_SPC_NB,
    AVChromaLocation,
    AVCHROMA_LOC_UNSPECIFIED,
    AVCHROMA_LOC_LEFT,
    AVCHROMA_LOC_CENTER,
    AVCHROMA_LOC_TOPLEFT,
    AVCHROMA_LOC_TOP,
    AVCHROMA_LOC_BOTTOMLEFT,
    AVCHROMA_LOC_BOTTOM,
    AVCHROMA_LOC_NB,
    AVFrame,
    ANONYMOUS_1,
    AV_FRAME_CROP_UNALIGNED,
    AV_LOG_QUIET,
    AV_LOG_PANIC,
    AV_LOG_FATAL,
    AV_LOG_ERROR,
    AV_LOG_WARNING,
    AV_LOG_INFO,
    AV_LOG_VERBOSE,
    AV_LOG_DEBUG,
    AV_LOG_TRACE,
    AV_LOG_MAX_OFFSET,
    AV_LOG_SKIP_REPEATED,
    AV_LOG_PRINT_LEVEL,
    ANONYMOUS_2,
    AV_CLASS_CATEGORY_NA,
    AV_CLASS_CATEGORY_INPUT,
    AV_CLASS_CATEGORY_OUTPUT,
    AV_CLASS_CATEGORY_MUXER,
    AV_CLASS_CATEGORY_DEMUXER,
    AV_CLASS_CATEGORY_ENCODER,
    AV_CLASS_CATEGORY_DECODER,
    AV_CLASS_CATEGORY_FILTER,
    AV_CLASS_CATEGORY_BITSTREAM_FILTER,
    AV_CLASS_CATEGORY_SWSCALER,
    AV_CLASS_CATEGORY_SWRESAMPLER,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT,
    AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT,
    AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT,
    AV_CLASS_CATEGORY_DEVICE_OUTPUT,
    AV_CLASS_CATEGORY_DEVICE_INPUT,
    AV_CLASS_CATEGORY_NB,
    AVClassCategory,
    AVOptionRange,
    AVOptionRanges,
    AVOptionType,
    AV_OPT_TYPE_FLAGS,
    AV_OPT_TYPE_INT,
    AV_OPT_TYPE_INT64,
    AV_OPT_TYPE_DOUBLE,
    AV_OPT_TYPE_FLOAT,
    AV_OPT_TYPE_STRING,
    AV_OPT_TYPE_RATIONAL,
    AV_OPT_TYPE_BINARY,
    AV_OPT_TYPE_DICT,
    AV_OPT_TYPE_UINT64,
    AV_OPT_TYPE_CONST,
    AV_OPT_TYPE_IMAGE_SIZE,
    AV_OPT_TYPE_PIXEL_FMT,
    AV_OPT_TYPE_SAMPLE_FMT,
    AV_OPT_TYPE_VIDEO_RATE,
    AV_OPT_TYPE_DURATION,
    AV_OPT_TYPE_COLOR,
    AV_OPT_TYPE_CHANNEL_LAYOUT,
    AV_OPT_TYPE_BOOL,
    AVOption,
    AVClass,
    AV_PIX_FMT_FLAG_BE,
    AV_PIX_FMT_FLAG_PAL,
    AV_PIX_FMT_FLAG_BITSTREAM,
    AV_PIX_FMT_FLAG_HWACCEL,
    AV_PIX_FMT_FLAG_PLANAR,
    AV_PIX_FMT_FLAG_RGB,
    AV_PIX_FMT_FLAG_PSEUDOPAL,
    AV_PIX_FMT_FLAG_ALPHA,
    AV_PIX_FMT_FLAG_BAYER,
    AV_PIX_FMT_FLAG_FLOAT,
    AVComponentDescriptor,
    AVPixFmtDescriptor,
    AVPALETTE_SIZE,
    AVPALETTE_COUNT,
    AVPixelFormat,
    AV_PIX_FMT_NONE,
    AV_PIX_FMT_YUV420P,
    AV_PIX_FMT_YUYV422,
    AV_PIX_FMT_RGB24,
    AV_PIX_FMT_BGR24,
    AV_PIX_FMT_YUV422P,
    AV_PIX_FMT_YUV444P,
    AV_PIX_FMT_YUV410P,
    AV_PIX_FMT_YUV411P,
    AV_PIX_FMT_GRAY8,
    AV_PIX_FMT_MONOWHITE,
    AV_PIX_FMT_MONOBLACK,
    AV_PIX_FMT_PAL8,
    AV_PIX_FMT_YUVJ420P,
    AV_PIX_FMT_YUVJ422P,
    AV_PIX_FMT_YUVJ444P,
    AV_PIX_FMT_UYVY422,
    AV_PIX_FMT_UYYVYY411,
    AV_PIX_FMT_BGR8,
    AV_PIX_FMT_BGR4,
    AV_PIX_FMT_BGR4_BYTE,
    AV_PIX_FMT_RGB8,
    AV_PIX_FMT_RGB4,
    AV_PIX_FMT_RGB4_BYTE,
    AV_PIX_FMT_NV12,
    AV_PIX_FMT_NV21,
    AV_PIX_FMT_ARGB,
    AV_PIX_FMT_RGBA,
    AV_PIX_FMT_ABGR,
    AV_PIX_FMT_BGRA,
    AV_PIX_FMT_GRAY16BE,
    AV_PIX_FMT_GRAY16LE,
    AV_PIX_FMT_YUV440P,
    AV_PIX_FMT_YUVJ440P,
    AV_PIX_FMT_YUVA420P,
    AV_PIX_FMT_RGB48BE,
    AV_PIX_FMT_RGB48LE,
    AV_PIX_FMT_RGB565BE,
    AV_PIX_FMT_RGB565LE,
    AV_PIX_FMT_RGB555BE,
    AV_PIX_FMT_RGB555LE,
    AV_PIX_FMT_BGR565BE,
    AV_PIX_FMT_BGR565LE,
    AV_PIX_FMT_BGR555BE,
    AV_PIX_FMT_BGR555LE,
    AV_PIX_FMT_VAAPI_MOCO,
    AV_PIX_FMT_VAAPI_IDCT,
    AV_PIX_FMT_VAAPI_VLD,
    AV_PIX_FMT_VAAPI,
    AV_PIX_FMT_YUV420P16LE,
    AV_PIX_FMT_YUV420P16BE,
    AV_PIX_FMT_YUV422P16LE,
    AV_PIX_FMT_YUV422P16BE,
    AV_PIX_FMT_YUV444P16LE,
    AV_PIX_FMT_YUV444P16BE,
    AV_PIX_FMT_DXVA2_VLD,
    AV_PIX_FMT_RGB444LE,
    AV_PIX_FMT_RGB444BE,
    AV_PIX_FMT_BGR444LE,
    AV_PIX_FMT_BGR444BE,
    AV_PIX_FMT_YA8,
    AV_PIX_FMT_Y400A,
    AV_PIX_FMT_GRAY8A,
    AV_PIX_FMT_BGR48BE,
    AV_PIX_FMT_BGR48LE,
    AV_PIX_FMT_YUV420P9BE,
    AV_PIX_FMT_YUV420P9LE,
    AV_PIX_FMT_YUV420P10BE,
    AV_PIX_FMT_YUV420P10LE,
    AV_PIX_FMT_YUV422P10BE,
    AV_PIX_FMT_YUV422P10LE,
    AV_PIX_FMT_YUV444P9BE,
    AV_PIX_FMT_YUV444P9LE,
    AV_PIX_FMT_YUV444P10BE,
    AV_PIX_FMT_YUV444P10LE,
    AV_PIX_FMT_YUV422P9BE,
    AV_PIX_FMT_YUV422P9LE,
    AV_PIX_FMT_GBRP,
    AV_PIX_FMT_GBR24P,
    AV_PIX_FMT_GBRP9BE,
    AV_PIX_FMT_GBRP9LE,
    AV_PIX_FMT_GBRP10BE,
    AV_PIX_FMT_GBRP10LE,
    AV_PIX_FMT_GBRP16BE,
    AV_PIX_FMT_GBRP16LE,
    AV_PIX_FMT_YUVA422P,
    AV_PIX_FMT_YUVA444P,
    AV_PIX_FMT_YUVA420P9BE,
    AV_PIX_FMT_YUVA420P9LE,
    AV_PIX_FMT_YUVA422P9BE,
    AV_PIX_FMT_YUVA422P9LE,
    AV_PIX_FMT_YUVA444P9BE,
    AV_PIX_FMT_YUVA444P9LE,
    AV_PIX_FMT_YUVA420P10BE,
    AV_PIX_FMT_YUVA420P10LE,
    AV_PIX_FMT_YUVA422P10BE,
    AV_PIX_FMT_YUVA422P10LE,
    AV_PIX_FMT_YUVA444P10BE,
    AV_PIX_FMT_YUVA444P10LE,
    AV_PIX_FMT_YUVA420P16BE,
    AV_PIX_FMT_YUVA420P16LE,
    AV_PIX_FMT_YUVA422P16BE,
    AV_PIX_FMT_YUVA422P16LE,
    AV_PIX_FMT_YUVA444P16BE,
    AV_PIX_FMT_YUVA444P16LE,
    AV_PIX_FMT_VDPAU,
    AV_PIX_FMT_XYZ12LE,
    AV_PIX_FMT_XYZ12BE,
    AV_PIX_FMT_NV16,
    AV_PIX_FMT_NV20LE,
    AV_PIX_FMT_NV20BE,
    AV_PIX_FMT_RGBA64BE,
    AV_PIX_FMT_RGBA64LE,
    AV_PIX_FMT_BGRA64BE,
    AV_PIX_FMT_BGRA64LE,
    AV_PIX_FMT_YVYU422,
    AV_PIX_FMT_YA16BE,
    AV_PIX_FMT_YA16LE,
    AV_PIX_FMT_GBRAP,
    AV_PIX_FMT_GBRAP16BE,
    AV_PIX_FMT_GBRAP16LE,
    AV_PIX_FMT_QSV,
    AV_PIX_FMT_MMAL,
    AV_PIX_FMT_D3D11VA_VLD,
    AV_PIX_FMT_CUDA,
    AV_PIX_FMT_0RGB,
    AV_PIX_FMT_RGB0,
    AV_PIX_FMT_0BGR,
    AV_PIX_FMT_BGR0,
    AV_PIX_FMT_YUV420P12BE,
    AV_PIX_FMT_YUV420P12LE,
    AV_PIX_FMT_YUV420P14BE,
    AV_PIX_FMT_YUV420P14LE,
    AV_PIX_FMT_YUV422P12BE,
    AV_PIX_FMT_YUV422P12LE,
    AV_PIX_FMT_YUV422P14BE,
    AV_PIX_FMT_YUV422P14LE,
    AV_PIX_FMT_YUV444P12BE,
    AV_PIX_FMT_YUV444P12LE,
    AV_PIX_FMT_YUV444P14BE,
    AV_PIX_FMT_YUV444P14LE,
    AV_PIX_FMT_GBRP12BE,
    AV_PIX_FMT_GBRP12LE,
    AV_PIX_FMT_GBRP14BE,
    AV_PIX_FMT_GBRP14LE,
    AV_PIX_FMT_YUVJ411P,
    AV_PIX_FMT_BAYER_BGGR8,
    AV_PIX_FMT_BAYER_RGGB8,
    AV_PIX_FMT_BAYER_GBRG8,
    AV_PIX_FMT_BAYER_GRBG8,
    AV_PIX_FMT_BAYER_BGGR16LE,
    AV_PIX_FMT_BAYER_BGGR16BE,
    AV_PIX_FMT_BAYER_RGGB16LE,
    AV_PIX_FMT_BAYER_RGGB16BE,
    AV_PIX_FMT_BAYER_GBRG16LE,
    AV_PIX_FMT_BAYER_GBRG16BE,
    AV_PIX_FMT_BAYER_GRBG16LE,
    AV_PIX_FMT_BAYER_GRBG16BE,
    AV_PIX_FMT_XVMC,
    AV_PIX_FMT_YUV440P10LE,
    AV_PIX_FMT_YUV440P10BE,
    AV_PIX_FMT_YUV440P12LE,
    AV_PIX_FMT_YUV440P12BE,
    AV_PIX_FMT_AYUV64LE,
    AV_PIX_FMT_AYUV64BE,
    AV_PIX_FMT_VIDEOTOOLBOX,
    AV_PIX_FMT_P010LE,
    AV_PIX_FMT_P010BE,
    AV_PIX_FMT_GBRAP12BE,
    AV_PIX_FMT_GBRAP12LE,
    AV_PIX_FMT_GBRAP10BE,
    AV_PIX_FMT_GBRAP10LE,
    AV_PIX_FMT_MEDIACODEC,
    AV_PIX_FMT_GRAY12BE,
    AV_PIX_FMT_GRAY12LE,
    AV_PIX_FMT_GRAY10BE,
    AV_PIX_FMT_GRAY10LE,
    AV_PIX_FMT_P016LE,
    AV_PIX_FMT_P016BE,
    AV_PIX_FMT_D3D11,
    AV_PIX_FMT_GRAY9BE,
    AV_PIX_FMT_GRAY9LE,
    AV_PIX_FMT_GBRPF32BE,
    AV_PIX_FMT_GBRPF32LE,
    AV_PIX_FMT_GBRAPF32BE,
    AV_PIX_FMT_GBRAPF32LE,
    AV_PIX_FMT_DRM_PRIME,
    AV_PIX_FMT_OPENCL,
    AV_PIX_FMT_GRAY14BE,
    AV_PIX_FMT_GRAY14LE,
    AV_PIX_FMT_GRAYF32BE,
    AV_PIX_FMT_GRAYF32LE,
    AV_PIX_FMT_NB,
    AVSampleFormat,
    AV_SAMPLE_FMT_NONE,
    AV_SAMPLE_FMT_U8,
    AV_SAMPLE_FMT_S16,
    AV_SAMPLE_FMT_S32,
    AV_SAMPLE_FMT_FLT,
    AV_SAMPLE_FMT_DBL,
    AV_SAMPLE_FMT_U8P,
    AV_SAMPLE_FMT_S16P,
    AV_SAMPLE_FMT_S32P,
    AV_SAMPLE_FMT_FLTP,
    AV_SAMPLE_FMT_DBLP,
    AV_SAMPLE_FMT_S64,
    AV_SAMPLE_FMT_S64P,
    AV_SAMPLE_FMT_NB,
    LIBAVUTIL_VERSION_MAJOR,
    LIBAVUTIL_VERSION_MINOR,
    LIBAVUTIL_VERSION_MICRO,
    LIBAVUTIL_BUILD,
    AES_CTR_KEY_SIZE,
    AES_CTR_IV_SIZE,
    AVAESCTR,
    AVAudioFifo,
    AVCAMELLIA,
    AVCAST5,
    AV_CH_FRONT_LEFT,
    AV_CH_FRONT_RIGHT,
    AV_CH_FRONT_CENTER,
    AV_CH_LOW_FREQUENCY,
    AV_CH_BACK_LEFT,
    AV_CH_BACK_RIGHT,
    AV_CH_FRONT_LEFT_OF_CENTER,
    AV_CH_FRONT_RIGHT_OF_CENTER,
    AV_CH_BACK_CENTER,
    AV_CH_SIDE_LEFT,
    AV_CH_SIDE_RIGHT,
    AV_CH_TOP_CENTER,
    AV_CH_TOP_FRONT_LEFT,
    AV_CH_TOP_FRONT_CENTER,
    AV_CH_TOP_FRONT_RIGHT,
    AV_CH_TOP_BACK_LEFT,
    AV_CH_TOP_BACK_CENTER,
    AV_CH_TOP_BACK_RIGHT,
    AV_CH_STEREO_LEFT,
    AV_CH_STEREO_RIGHT,
    AV_CH_WIDE_LEFT,
    AV_CH_WIDE_RIGHT,
    AV_CH_SURROUND_DIRECT_LEFT,
    AV_CH_SURROUND_DIRECT_RIGHT,
    AV_CH_LOW_FREQUENCY_2,
    AV_CH_LAYOUT_NATIVE,
    AV_CH_LAYOUT_MONO,
    AV_CH_LAYOUT_STEREO,
    AV_CH_LAYOUT_2POINT1,
    AV_CH_LAYOUT_2_1,
    AV_CH_LAYOUT_SURROUND,
    AV_CH_LAYOUT_3POINT1,
    AV_CH_LAYOUT_4POINT0,
    AV_CH_LAYOUT_4POINT1,
    AV_CH_LAYOUT_2_2,
    AV_CH_LAYOUT_QUAD,
    AV_CH_LAYOUT_5POINT0,
    AV_CH_LAYOUT_5POINT1,
    AV_CH_LAYOUT_5POINT0_BACK,
    AV_CH_LAYOUT_5POINT1_BACK,
    AV_CH_LAYOUT_6POINT0,
    AV_CH_LAYOUT_6POINT0_FRONT,
    AV_CH_LAYOUT_HEXAGONAL,
    AV_CH_LAYOUT_6POINT1,
    AV_CH_LAYOUT_6POINT1_BACK,
    AV_CH_LAYOUT_6POINT1_FRONT,
    AV_CH_LAYOUT_7POINT0,
    AV_CH_LAYOUT_7POINT0_FRONT,
    AV_CH_LAYOUT_7POINT1,
    AV_CH_LAYOUT_7POINT1_WIDE,
    AV_CH_LAYOUT_7POINT1_WIDE_BACK,
    AV_CH_LAYOUT_OCTAGONAL,
    AV_CH_LAYOUT_HEXADECAGONAL,
    AV_CH_LAYOUT_STEREO_DOWNMIX,
    AVMatrixEncoding,
    AV_MATRIX_ENCODING_NONE,
    AV_MATRIX_ENCODING_DOLBY,
    AV_MATRIX_ENCODING_DPLII,
    AV_MATRIX_ENCODING_DPLIIX,
    AV_MATRIX_ENCODING_DPLIIZ,
    AV_MATRIX_ENCODING_DOLBYEX,
    AV_MATRIX_ENCODING_DOLBYHEADPHONE,
    AV_MATRIX_ENCODING_NB,
    AVBPrint,
    AVDES,
    AVDownmixType,
    AV_DOWNMIX_TYPE_UNKNOWN,
    AV_DOWNMIX_TYPE_LORO,
    AV_DOWNMIX_TYPE_LTRT,
    AV_DOWNMIX_TYPE_DPLII,
    AV_DOWNMIX_TYPE_NB,
    AVDownmixInfo,
    AVSubsampleEncryptionInfo,
    AVEncryptionInfo,
    AVEncryptionInitInfo,
    AV_HASH_MAX_SIZE,
    AVHashContext,
    AVHWDeviceType,
    AV_HWDEVICE_TYPE_NONE,
    AV_HWDEVICE_TYPE_VDPAU,
    AV_HWDEVICE_TYPE_CUDA,
    AV_HWDEVICE_TYPE_VAAPI,
    AV_HWDEVICE_TYPE_DXVA2,
    AV_HWDEVICE_TYPE_QSV,
    AV_HWDEVICE_TYPE_VIDEOTOOLBOX,
    AV_HWDEVICE_TYPE_D3D11VA,
    AV_HWDEVICE_TYPE_DRM,
    AV_HWDEVICE_TYPE_OPENCL,
    AV_HWDEVICE_TYPE_MEDIACODEC,
    AVHWDeviceInternal,
    AVHWDeviceContext,
    AVHWFramesInternal,
    AVHWFramesContext,
    AVHWFrameTransferDirection,
    AV_HWFRAME_TRANSFER_DIRECTION_FROM,
    AV_HWFRAME_TRANSFER_DIRECTION_TO,
    AVHWFramesConstraints,
    ANONYMOUS_3,
    AV_HWFRAME_MAP_READ,
    AV_HWFRAME_MAP_WRITE,
    AV_HWFRAME_MAP_OVERWRITE,
    AV_HWFRAME_MAP_DIRECT,
    AVCUDADeviceContextInternal,
    AVCUDADeviceContext,
    AVD3D11VADeviceContext,
    AVD3D11FrameDescriptor,
    AVD3D11VAFramesContext,
    ANONYMOUS_4,
    AV_DRM_MAX_PLANES,
    AVDRMObjectDescriptor,
    AVDRMPlaneDescriptor,
    AVDRMLayerDescriptor,
    AVDRMFrameDescriptor,
    AVDRMDeviceContext,
    AVDXVA2DeviceContext,
    AVDXVA2FramesContext,
    AVMediaCodecDeviceContext,
    AVQSVDeviceContext,
    AVQSVFramesContext,
    ANONYMOUS_5,
    AV_VAAPI_DRIVER_QUIRK_USER_SET,
    AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS,
    AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE,
    AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES,
    # AVVAAPIDeviceContext,
    # AVVAAPIFramesContext,
    # AVVAAPIHWConfig,
    # AVVDPAUDeviceContext,
    AVMasteringDisplayMetadata,
    AVContentLightMetadata,
    AVMotionVector,
    AV_OPT_FLAG_ENCODING_PARAM,
    AV_OPT_FLAG_DECODING_PARAM,
    AV_OPT_FLAG_AUDIO_PARAM,
    AV_OPT_FLAG_VIDEO_PARAM,
    AV_OPT_FLAG_SUBTITLE_PARAM,
    AV_OPT_FLAG_EXPORT,
    AV_OPT_FLAG_READONLY,
    AV_OPT_FLAG_BSF_PARAM,
    AV_OPT_FLAG_FILTERING_PARAM,
    AV_OPT_FLAG_DEPRECATED,
    AV_OPT_SEARCH_CHILDREN,
    AV_OPT_SEARCH_FAKE_OBJ,
    AV_OPT_ALLOW_NULL,
    AV_OPT_MULTI_COMPONENT_RANGE,
    AV_OPT_SERIALIZE_SKIP_DEFAULTS,
    AV_OPT_SERIALIZE_OPT_FLAGS_EXACT,
    ANONYMOUS_6,
    AV_OPT_FLAG_IMPLICIT_KEY,
    av_pixelutils_sad_fn,
    AVRC4,
    AVReplayGain,
    AVSphericalProjection,
    AV_SPHERICAL_EQUIRECTANGULAR,
    AV_SPHERICAL_CUBEMAP,
    AV_SPHERICAL_EQUIRECTANGULAR_TILE,
    AVSphericalMapping,
    AV_STEREO3D_FLAG_INVERT,
    AVStereo3DType,
    AV_STEREO3D_2D,
    AV_STEREO3D_SIDEBYSIDE,
    AV_STEREO3D_TOPBOTTOM,
    AV_STEREO3D_FRAMESEQUENCE,
    AV_STEREO3D_CHECKERBOARD,
    AV_STEREO3D_SIDEBYSIDE_QUINCUNX,
    AV_STEREO3D_LINES,
    AV_STEREO3D_COLUMNS,
    AVStereo3DView,
    AV_STEREO3D_VIEW_PACKED,
    AV_STEREO3D_VIEW_LEFT,
    AV_STEREO3D_VIEW_RIGHT,
    AVStereo3D,
    AVTEA,
    AVThreadMessageQueue,
    AVThreadMessageFlags,
    AV_THREAD_MESSAGE_NONBLOCK,
    AV_TIMECODE_STR_SIZE,
    AVTimecodeFlag,
    AV_TIMECODE_FLAG_DROPFRAME,
    AV_TIMECODE_FLAG_24HOURSMAX,
    AV_TIMECODE_FLAG_ALLOWNEGATIVE,
    AVTimecode,
    AVTreeNode,
    AVTWOFISH,
    AVXTEA


const unix = 1
const linux = 1
const FF_LAMBDA_SHIFT = 7
const FF_LAMBDA_SCALE = 1 << FF_LAMBDA_SHIFT
const FF_QP2LAMBDA = 118
const FF_LAMBDA_MAX = 256 * 128 - 1
const FF_QUALITY_SCALE = FF_LAMBDA_SCALE

const AV_NOPTS_VALUE  =  reinterpret(Int64, 0x8000000000000000)

const AV_TIME_BASE = 1000000

struct AVRational
    num::Cint
    den::Cint
end

zero(::Type{AVRational}) = AVRational(0, 1)

const AV_TIME_BASE_Q  =  AVRational(1, AV_TIME_BASE)

# Skipping MacroDefinition: av_int_list_length ( list , term ) av_int_list_length_for_size ( sizeof ( * ( list ) ) , list , term )

const AV_FOURCC_MAX_STRING_SIZE = 32

# Skipping MacroDefinition: av_fourcc2str ( fourcc ) av_fourcc_make_string ( ( char [ AV_FOURCC_MAX_STRING_SIZE ] ) { 0 } , fourcc )

# begin enum AVMediaType
const AVMediaType = Cint
const AVMEDIA_TYPE_UNKNOWN = -1 |> Int32
const AVMEDIA_TYPE_VIDEO = 0 |> Int32
const AVMEDIA_TYPE_AUDIO = 1 |> Int32
const AVMEDIA_TYPE_DATA = 2 |> Int32
const AVMEDIA_TYPE_SUBTITLE = 3 |> Int32
const AVMEDIA_TYPE_ATTACHMENT = 4 |> Int32
const AVMEDIA_TYPE_NB = 5 |> Int32
# end enum AVMediaType

# begin enum AVPictureType
const AVPictureType = UInt32
const AV_PICTURE_TYPE_NONE = 0 |> UInt32
const AV_PICTURE_TYPE_I = 1 |> UInt32
const AV_PICTURE_TYPE_P = 2 |> UInt32
const AV_PICTURE_TYPE_B = 3 |> UInt32
const AV_PICTURE_TYPE_S = 4 |> UInt32
const AV_PICTURE_TYPE_SI = 5 |> UInt32
const AV_PICTURE_TYPE_SP = 6 |> UInt32
const AV_PICTURE_TYPE_BI = 7 |> UInt32
# end enum AVPictureType

const AV_BUFFER_FLAG_READONLY = 1 << 0

struct AVBuffer
end

struct AVBufferRef
    buffer::Ptr{AVBuffer}
    data::Ptr{UInt8}
    size::Cint
end

struct AVBufferPool
end

const AV_DICT_MATCH_CASE = 1
const AV_DICT_IGNORE_SUFFIX = 2
const AV_DICT_DONT_STRDUP_KEY = 4
const AV_DICT_DONT_STRDUP_VAL = 8
const AV_DICT_DONT_OVERWRITE = 16
const AV_DICT_APPEND = 32
const AV_DICT_MULTIKEY = 64

struct AVDictionaryEntry
    key::Cstring
    value::Cstring
end

struct AVDictionary
end

struct AVFifoBuffer
    buffer::Ptr{UInt8}
    rptr::Ptr{UInt8}
    wptr::Ptr{UInt8}
    _end::Ptr{UInt8}
    rndx::UInt32
    wndx::UInt32
end

const AV_NUM_DATA_POINTERS = 8
const AV_FRAME_FLAG_CORRUPT = 1 << 0
const AV_FRAME_FLAG_DISCARD = 1 << 2
const FF_DECODE_ERROR_INVALID_BITSTREAM = 1
const FF_DECODE_ERROR_MISSING_REFERENCE = 2

# begin enum AVFrameSideDataType
const AVFrameSideDataType = UInt32
const AV_FRAME_DATA_PANSCAN = 0 |> UInt32
const AV_FRAME_DATA_A53_CC = 1 |> UInt32
const AV_FRAME_DATA_STEREO3D = 2 |> UInt32
const AV_FRAME_DATA_MATRIXENCODING = 3 |> UInt32
const AV_FRAME_DATA_DOWNMIX_INFO = 4 |> UInt32
const AV_FRAME_DATA_REPLAYGAIN = 5 |> UInt32
const AV_FRAME_DATA_DISPLAYMATRIX = 6 |> UInt32
const AV_FRAME_DATA_AFD = 7 |> UInt32
const AV_FRAME_DATA_MOTION_VECTORS = 8 |> UInt32
const AV_FRAME_DATA_SKIP_SAMPLES = 9 |> UInt32
const AV_FRAME_DATA_AUDIO_SERVICE_TYPE = 10 |> UInt32
const AV_FRAME_DATA_MASTERING_DISPLAY_METADATA = 11 |> UInt32
const AV_FRAME_DATA_GOP_TIMECODE = 12 |> UInt32
const AV_FRAME_DATA_SPHERICAL = 13 |> UInt32
const AV_FRAME_DATA_CONTENT_LIGHT_LEVEL = 14 |> UInt32
const AV_FRAME_DATA_ICC_PROFILE = 15 |> UInt32
const AV_FRAME_DATA_QP_TABLE_PROPERTIES = 16 |> UInt32
const AV_FRAME_DATA_QP_TABLE_DATA = 17 |> UInt32
const AV_FRAME_DATA_S12M_TIMECODE = 18 |> UInt32
# end enum AVFrameSideDataType

# begin enum AVActiveFormatDescription
const AVActiveFormatDescription = UInt32
const AV_AFD_SAME = 8 |> UInt32
const AV_AFD_4_3 = 9 |> UInt32
const AV_AFD_16_9 = 10 |> UInt32
const AV_AFD_14_9 = 11 |> UInt32
const AV_AFD_4_3_SP_14_9 = 13 |> UInt32
const AV_AFD_16_9_SP_14_9 = 14 |> UInt32
const AV_AFD_SP_4_3 = 15 |> UInt32
# end enum AVActiveFormatDescription

struct AVFrameSideData
    _type::AVFrameSideDataType
    data::Ptr{UInt8}
    size::Cint
    metadata::Ptr{AVDictionary}
    buf::Ptr{AVBufferRef}
end

# begin enum AVColorRange
const AVColorRange = UInt32
const AVCOL_RANGE_UNSPECIFIED = 0 |> UInt32
const AVCOL_RANGE_MPEG = 1 |> UInt32
const AVCOL_RANGE_JPEG = 2 |> UInt32
const AVCOL_RANGE_NB = 3 |> UInt32
# end enum AVColorRange

# begin enum AVColorPrimaries
const AVColorPrimaries = UInt32
const AVCOL_PRI_RESERVED0 = 0 |> UInt32
const AVCOL_PRI_BT709 = 1 |> UInt32
const AVCOL_PRI_UNSPECIFIED = 2 |> UInt32
const AVCOL_PRI_RESERVED = 3 |> UInt32
const AVCOL_PRI_BT470M = 4 |> UInt32
const AVCOL_PRI_BT470BG = 5 |> UInt32
const AVCOL_PRI_SMPTE170M = 6 |> UInt32
const AVCOL_PRI_SMPTE240M = 7 |> UInt32
const AVCOL_PRI_FILM = 8 |> UInt32
const AVCOL_PRI_BT2020 = 9 |> UInt32
const AVCOL_PRI_SMPTE428 = 10 |> UInt32
const AVCOL_PRI_SMPTEST428_1 = 10 |> UInt32
const AVCOL_PRI_SMPTE431 = 11 |> UInt32
const AVCOL_PRI_SMPTE432 = 12 |> UInt32
const AVCOL_PRI_JEDEC_P22 = 22 |> UInt32
const AVCOL_PRI_NB = 23 |> UInt32
# end enum AVColorPrimaries

# begin enum AVColorTransferCharacteristic
const AVColorTransferCharacteristic = UInt32
const AVCOL_TRC_RESERVED0 = 0 |> UInt32
const AVCOL_TRC_BT709 = 1 |> UInt32
const AVCOL_TRC_UNSPECIFIED = 2 |> UInt32
const AVCOL_TRC_RESERVED = 3 |> UInt32
const AVCOL_TRC_GAMMA22 = 4 |> UInt32
const AVCOL_TRC_GAMMA28 = 5 |> UInt32
const AVCOL_TRC_SMPTE170M = 6 |> UInt32
const AVCOL_TRC_SMPTE240M = 7 |> UInt32
const AVCOL_TRC_LINEAR = 8 |> UInt32
const AVCOL_TRC_LOG = 9 |> UInt32
const AVCOL_TRC_LOG_SQRT = 10 |> UInt32
const AVCOL_TRC_IEC61966_2_4 = 11 |> UInt32
const AVCOL_TRC_BT1361_ECG = 12 |> UInt32
const AVCOL_TRC_IEC61966_2_1 = 13 |> UInt32
const AVCOL_TRC_BT2020_10 = 14 |> UInt32
const AVCOL_TRC_BT2020_12 = 15 |> UInt32
const AVCOL_TRC_SMPTE2084 = 16 |> UInt32
const AVCOL_TRC_SMPTEST2084 = 16 |> UInt32
const AVCOL_TRC_SMPTE428 = 17 |> UInt32
const AVCOL_TRC_SMPTEST428_1 = 17 |> UInt32
const AVCOL_TRC_ARIB_STD_B67 = 18 |> UInt32
const AVCOL_TRC_NB = 19 |> UInt32
# end enum AVColorTransferCharacteristic

# begin enum AVColorSpace
const AVColorSpace = UInt32
const AVCOL_SPC_RGB = 0 |> UInt32
const AVCOL_SPC_BT709 = 1 |> UInt32
const AVCOL_SPC_UNSPECIFIED = 2 |> UInt32
const AVCOL_SPC_RESERVED = 3 |> UInt32
const AVCOL_SPC_FCC = 4 |> UInt32
const AVCOL_SPC_BT470BG = 5 |> UInt32
const AVCOL_SPC_SMPTE170M = 6 |> UInt32
const AVCOL_SPC_SMPTE240M = 7 |> UInt32
const AVCOL_SPC_YCGCO = 8 |> UInt32
const AVCOL_SPC_YCOCG = 8 |> UInt32
const AVCOL_SPC_BT2020_NCL = 9 |> UInt32
const AVCOL_SPC_BT2020_CL = 10 |> UInt32
const AVCOL_SPC_SMPTE2085 = 11 |> UInt32
const AVCOL_SPC_CHROMA_DERIVED_NCL = 12 |> UInt32
const AVCOL_SPC_CHROMA_DERIVED_CL = 13 |> UInt32
const AVCOL_SPC_ICTCP = 14 |> UInt32
const AVCOL_SPC_NB = 15 |> UInt32
# end enum AVColorSpace

# begin enum AVChromaLocation
const AVChromaLocation = UInt32
const AVCHROMA_LOC_UNSPECIFIED = 0 |> UInt32
const AVCHROMA_LOC_LEFT = 1 |> UInt32
const AVCHROMA_LOC_CENTER = 2 |> UInt32
const AVCHROMA_LOC_TOPLEFT = 3 |> UInt32
const AVCHROMA_LOC_TOP = 4 |> UInt32
const AVCHROMA_LOC_BOTTOMLEFT = 5 |> UInt32
const AVCHROMA_LOC_BOTTOM = 6 |> UInt32
const AVCHROMA_LOC_NB = 7 |> UInt32
# end enum AVChromaLocation

zero(::Type{NTuple{N,P}}) where {N,P<:Ptr} = (N == 1 ? (C_NULL,) : (zero(NTuple{N-1,P})..., C_NULL))
zero(::Type{NTuple{N,T}}) where {N,T} = (N == 1 ? (zero(T),) : (zero(NTuple{N-1,T})..., zero(T)))

struct AVFrame
    data::NTuple{8, Ptr{UInt8}}
    linesize::NTuple{8, Cint}
    extended_data::Ptr{Ptr{UInt8}}
    width::Cint
    height::Cint
    nb_samples::Cint
    format::Cint
    key_frame::Cint
    pict_type::AVPictureType
    sample_aspect_ratio::AVRational
    pts::Int64
    pkt_pts::Int64
    pkt_dts::Int64
    coded_picture_number::Cint
    display_picture_number::Cint
    quality::Cint
    opaque::Ptr{Cvoid}
    error::NTuple{8, UInt64}
    repeat_pict::Cint
    interlaced_frame::Cint
    top_field_first::Cint
    palette_has_changed::Cint
    reordered_opaque::Int64
    sample_rate::Cint
    channel_layout::UInt64
    buf::NTuple{8, Ptr{AVBufferRef}}
    extended_buf::Ptr{Ptr{AVBufferRef}}
    nb_extended_buf::Cint
    side_data::Ptr{Ptr{AVFrameSideData}}
    nb_side_data::Cint
    flags::Cint
    color_range::AVColorRange
    color_primaries::AVColorPrimaries
    color_trc::AVColorTransferCharacteristic
    colorspace::AVColorSpace
    chroma_location::AVChromaLocation
    best_effort_timestamp::Int64
    pkt_pos::Int64
    pkt_duration::Int64
    metadata::Ptr{AVDictionary}
    decode_error_flags::Cint
    channels::Cint
    pkt_size::Cint
    qscale_table::Ptr{Int8}
    qstride::Cint
    qscale_type::Cint
    qp_table_buf::Ptr{AVBufferRef}
    hw_frames_ctx::Ptr{AVBufferRef}
    opaque_ref::Ptr{AVBufferRef}
    crop_top::Csize_t
    crop_bottom::Csize_t
    crop_left::Csize_t
    crop_right::Csize_t
    private_ref::Ptr{AVBufferRef}
end

# begin enum ANONYMOUS_1
const ANONYMOUS_1 = UInt32
const AV_FRAME_CROP_UNALIGNED = 1 |> UInt32
# end enum ANONYMOUS_1

# Skipping MacroDefinition: AV_IS_INPUT_DEVICE ( category ) ( ( ( category ) == AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT ) || ( ( category ) == AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT ) || ( ( category ) == AV_CLASS_CATEGORY_DEVICE_INPUT ) )
# Skipping MacroDefinition: AV_IS_OUTPUT_DEVICE ( category ) ( ( ( category ) == AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT ) || ( ( category ) == AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT ) || ( ( category ) == AV_CLASS_CATEGORY_DEVICE_OUTPUT ) )

const AV_LOG_QUIET = -8
const AV_LOG_PANIC = 0
const AV_LOG_FATAL = 8
const AV_LOG_ERROR = 16
const AV_LOG_WARNING = 24
const AV_LOG_INFO = 32
const AV_LOG_VERBOSE = 40
const AV_LOG_DEBUG = 48
const AV_LOG_TRACE = 56
const AV_LOG_MAX_OFFSET = AV_LOG_TRACE - AV_LOG_QUIET

# Skipping MacroDefinition: AV_LOG_C ( x ) ( ( x ) << 8 )

const AV_LOG_SKIP_REPEATED = 1
const AV_LOG_PRINT_LEVEL = 2

# begin enum ANONYMOUS_2
const ANONYMOUS_2 = UInt32
const AV_CLASS_CATEGORY_NA = 0 |> UInt32
const AV_CLASS_CATEGORY_INPUT = 1 |> UInt32
const AV_CLASS_CATEGORY_OUTPUT = 2 |> UInt32
const AV_CLASS_CATEGORY_MUXER = 3 |> UInt32
const AV_CLASS_CATEGORY_DEMUXER = 4 |> UInt32
const AV_CLASS_CATEGORY_ENCODER = 5 |> UInt32
const AV_CLASS_CATEGORY_DECODER = 6 |> UInt32
const AV_CLASS_CATEGORY_FILTER = 7 |> UInt32
const AV_CLASS_CATEGORY_BITSTREAM_FILTER = 8 |> UInt32
const AV_CLASS_CATEGORY_SWSCALER = 9 |> UInt32
const AV_CLASS_CATEGORY_SWRESAMPLER = 10 |> UInt32
const AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40 |> UInt32
const AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT = 41 |> UInt32
const AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT = 42 |> UInt32
const AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT = 43 |> UInt32
const AV_CLASS_CATEGORY_DEVICE_OUTPUT = 44 |> UInt32
const AV_CLASS_CATEGORY_DEVICE_INPUT = 45 |> UInt32
const AV_CLASS_CATEGORY_NB = 46 |> UInt32
# end enum ANONYMOUS_2

const AVClassCategory = Cint

struct AVOptionRange
    str::Cstring
    value_min::Cdouble
    value_max::Cdouble
    component_min::Cdouble
    component_max::Cdouble
    is_range::Cint
end

struct AVOptionRanges
    range::Ptr{Ptr{AVOptionRange}}
    nb_ranges::Cint
    nb_components::Cint
end

# begin enum AVOptionType
const AVOptionType = UInt32
const AV_OPT_TYPE_FLAGS = 0 |> UInt32
const AV_OPT_TYPE_INT = 1 |> UInt32
const AV_OPT_TYPE_INT64 = 2 |> UInt32
const AV_OPT_TYPE_DOUBLE = 3 |> UInt32
const AV_OPT_TYPE_FLOAT = 4 |> UInt32
const AV_OPT_TYPE_STRING = 5 |> UInt32
const AV_OPT_TYPE_RATIONAL = 6 |> UInt32
const AV_OPT_TYPE_BINARY = 7 |> UInt32
const AV_OPT_TYPE_DICT = 8 |> UInt32
const AV_OPT_TYPE_UINT64 = 9 |> UInt32
const AV_OPT_TYPE_CONST = 10 |> UInt32
const AV_OPT_TYPE_IMAGE_SIZE = 11 |> UInt32
const AV_OPT_TYPE_PIXEL_FMT = 12 |> UInt32
const AV_OPT_TYPE_SAMPLE_FMT = 13 |> UInt32
const AV_OPT_TYPE_VIDEO_RATE = 14 |> UInt32
const AV_OPT_TYPE_DURATION = 15 |> UInt32
const AV_OPT_TYPE_COLOR = 16 |> UInt32
const AV_OPT_TYPE_CHANNEL_LAYOUT = 17 |> UInt32
const AV_OPT_TYPE_BOOL = 18 |> UInt32
# end enum AVOptionType

struct AVOption
    name::Cstring
    help::Cstring
    offset::Cint
    _type::AVOptionType
    default_val::Int64
    min::Cdouble
    max::Cdouble
    flags::Cint
    unit::Cstring
end

struct AVClass
    class_name::Cstring
    item_name::Ptr{Cvoid}
    option::Ptr{AVOption}
    version::Cint
    log_level_offset_offset::Cint
    parent_log_context_offset::Cint
    child_next::Ptr{Cvoid}
    child_class_next::Ptr{Cvoid}
    category::AVClassCategory
    get_category::Ptr{Cvoid}
    query_ranges::Ptr{Cvoid}
end

# Skipping MacroDefinition: DECLARE_ALIGNED ( n , t , v ) t __attribute__ ( ( aligned ( n ) ) ) v
# Skipping MacroDefinition: DECLARE_ASM_ALIGNED ( n , t , v ) t av_used __attribute__ ( ( aligned ( n ) ) ) v
# Skipping MacroDefinition: DECLARE_ASM_CONST ( n , t , v ) static const t av_used __attribute__ ( ( aligned ( n ) ) ) v
# Skipping MacroDefinition: av_malloc_attrib __attribute__ ( ( __malloc__ ) )
# Skipping MacroDefinition: av_alloc_size ( ... )

const AV_PIX_FMT_FLAG_BE = 1 << 0
const AV_PIX_FMT_FLAG_PAL = 1 << 1
const AV_PIX_FMT_FLAG_BITSTREAM = 1 << 2
const AV_PIX_FMT_FLAG_HWACCEL = 1 << 3
const AV_PIX_FMT_FLAG_PLANAR = 1 << 4
const AV_PIX_FMT_FLAG_RGB = 1 << 5
const AV_PIX_FMT_FLAG_PSEUDOPAL = 1 << 6
const AV_PIX_FMT_FLAG_ALPHA = 1 << 7
const AV_PIX_FMT_FLAG_BAYER = 1 << 8
const AV_PIX_FMT_FLAG_FLOAT = 1 << 9
const FF_LOSS_RESOLUTION = 0x0001
const FF_LOSS_DEPTH = 0x0002
const FF_LOSS_COLORSPACE = 0x0004
const FF_LOSS_ALPHA = 0x0008
const FF_LOSS_COLORQUANT = 0x0010
const FF_LOSS_CHROMA = 0x0020

struct AVComponentDescriptor
    plane::Cint
    step::Cint
    offset::Cint
    shift::Cint
    depth::Cint
    step_minus1::Cint
    depth_minus1::Cint
    offset_plus1::Cint
end

struct AVPixFmtDescriptor
    name::Cstring
    nb_components::UInt8
    log2_chroma_w::UInt8
    log2_chroma_h::UInt8
    flags::UInt64
    comp::NTuple{4, AVComponentDescriptor}
    alias::Cstring
end

const AVPALETTE_SIZE = 1024
const AVPALETTE_COUNT = 256

# begin enum AVPixelFormat
const AVPixelFormat = Cint
const AV_PIX_FMT_NONE = -1 |> Int32
const AV_PIX_FMT_YUV420P = 0 |> Int32
const AV_PIX_FMT_YUYV422 = 1 |> Int32
const AV_PIX_FMT_RGB24 = 2 |> Int32
const AV_PIX_FMT_BGR24 = 3 |> Int32
const AV_PIX_FMT_YUV422P = 4 |> Int32
const AV_PIX_FMT_YUV444P = 5 |> Int32
const AV_PIX_FMT_YUV410P = 6 |> Int32
const AV_PIX_FMT_YUV411P = 7 |> Int32
const AV_PIX_FMT_GRAY8 = 8 |> Int32
const AV_PIX_FMT_MONOWHITE = 9 |> Int32
const AV_PIX_FMT_MONOBLACK = 10 |> Int32
const AV_PIX_FMT_PAL8 = 11 |> Int32
const AV_PIX_FMT_YUVJ420P = 12 |> Int32
const AV_PIX_FMT_YUVJ422P = 13 |> Int32
const AV_PIX_FMT_YUVJ444P = 14 |> Int32
const AV_PIX_FMT_UYVY422 = 15 |> Int32
const AV_PIX_FMT_UYYVYY411 = 16 |> Int32
const AV_PIX_FMT_BGR8 = 17 |> Int32
const AV_PIX_FMT_BGR4 = 18 |> Int32
const AV_PIX_FMT_BGR4_BYTE = 19 |> Int32
const AV_PIX_FMT_RGB8 = 20 |> Int32
const AV_PIX_FMT_RGB4 = 21 |> Int32
const AV_PIX_FMT_RGB4_BYTE = 22 |> Int32
const AV_PIX_FMT_NV12 = 23 |> Int32
const AV_PIX_FMT_NV21 = 24 |> Int32
const AV_PIX_FMT_ARGB = 25 |> Int32
const AV_PIX_FMT_RGBA = 26 |> Int32
const AV_PIX_FMT_ABGR = 27 |> Int32
const AV_PIX_FMT_BGRA = 28 |> Int32
const AV_PIX_FMT_GRAY16BE = 29 |> Int32
const AV_PIX_FMT_GRAY16LE = 30 |> Int32
const AV_PIX_FMT_YUV440P = 31 |> Int32
const AV_PIX_FMT_YUVJ440P = 32 |> Int32
const AV_PIX_FMT_YUVA420P = 33 |> Int32
const AV_PIX_FMT_RGB48BE = 34 |> Int32
const AV_PIX_FMT_RGB48LE = 35 |> Int32
const AV_PIX_FMT_RGB565BE = 36 |> Int32
const AV_PIX_FMT_RGB565LE = 37 |> Int32
const AV_PIX_FMT_RGB555BE = 38 |> Int32
const AV_PIX_FMT_RGB555LE = 39 |> Int32
const AV_PIX_FMT_BGR565BE = 40 |> Int32
const AV_PIX_FMT_BGR565LE = 41 |> Int32
const AV_PIX_FMT_BGR555BE = 42 |> Int32
const AV_PIX_FMT_BGR555LE = 43 |> Int32
const AV_PIX_FMT_VAAPI_MOCO = 44 |> Int32
const AV_PIX_FMT_VAAPI_IDCT = 45 |> Int32
const AV_PIX_FMT_VAAPI_VLD = 46 |> Int32
const AV_PIX_FMT_VAAPI = 46 |> Int32
const AV_PIX_FMT_YUV420P16LE = 47 |> Int32
const AV_PIX_FMT_YUV420P16BE = 48 |> Int32
const AV_PIX_FMT_YUV422P16LE = 49 |> Int32
const AV_PIX_FMT_YUV422P16BE = 50 |> Int32
const AV_PIX_FMT_YUV444P16LE = 51 |> Int32
const AV_PIX_FMT_YUV444P16BE = 52 |> Int32
const AV_PIX_FMT_DXVA2_VLD = 53 |> Int32
const AV_PIX_FMT_RGB444LE = 54 |> Int32
const AV_PIX_FMT_RGB444BE = 55 |> Int32
const AV_PIX_FMT_BGR444LE = 56 |> Int32
const AV_PIX_FMT_BGR444BE = 57 |> Int32
const AV_PIX_FMT_YA8 = 58 |> Int32
const AV_PIX_FMT_Y400A = 58 |> Int32
const AV_PIX_FMT_GRAY8A = 58 |> Int32
const AV_PIX_FMT_BGR48BE = 59 |> Int32
const AV_PIX_FMT_BGR48LE = 60 |> Int32
const AV_PIX_FMT_YUV420P9BE = 61 |> Int32
const AV_PIX_FMT_YUV420P9LE = 62 |> Int32
const AV_PIX_FMT_YUV420P10BE = 63 |> Int32
const AV_PIX_FMT_YUV420P10LE = 64 |> Int32
const AV_PIX_FMT_YUV422P10BE = 65 |> Int32
const AV_PIX_FMT_YUV422P10LE = 66 |> Int32
const AV_PIX_FMT_YUV444P9BE = 67 |> Int32
const AV_PIX_FMT_YUV444P9LE = 68 |> Int32
const AV_PIX_FMT_YUV444P10BE = 69 |> Int32
const AV_PIX_FMT_YUV444P10LE = 70 |> Int32
const AV_PIX_FMT_YUV422P9BE = 71 |> Int32
const AV_PIX_FMT_YUV422P9LE = 72 |> Int32
const AV_PIX_FMT_GBRP = 73 |> Int32
const AV_PIX_FMT_GBR24P = 73 |> Int32
const AV_PIX_FMT_GBRP9BE = 74 |> Int32
const AV_PIX_FMT_GBRP9LE = 75 |> Int32
const AV_PIX_FMT_GBRP10BE = 76 |> Int32
const AV_PIX_FMT_GBRP10LE = 77 |> Int32
const AV_PIX_FMT_GBRP16BE = 78 |> Int32
const AV_PIX_FMT_GBRP16LE = 79 |> Int32
const AV_PIX_FMT_YUVA422P = 80 |> Int32
const AV_PIX_FMT_YUVA444P = 81 |> Int32
const AV_PIX_FMT_YUVA420P9BE = 82 |> Int32
const AV_PIX_FMT_YUVA420P9LE = 83 |> Int32
const AV_PIX_FMT_YUVA422P9BE = 84 |> Int32
const AV_PIX_FMT_YUVA422P9LE = 85 |> Int32
const AV_PIX_FMT_YUVA444P9BE = 86 |> Int32
const AV_PIX_FMT_YUVA444P9LE = 87 |> Int32
const AV_PIX_FMT_YUVA420P10BE = 88 |> Int32
const AV_PIX_FMT_YUVA420P10LE = 89 |> Int32
const AV_PIX_FMT_YUVA422P10BE = 90 |> Int32
const AV_PIX_FMT_YUVA422P10LE = 91 |> Int32
const AV_PIX_FMT_YUVA444P10BE = 92 |> Int32
const AV_PIX_FMT_YUVA444P10LE = 93 |> Int32
const AV_PIX_FMT_YUVA420P16BE = 94 |> Int32
const AV_PIX_FMT_YUVA420P16LE = 95 |> Int32
const AV_PIX_FMT_YUVA422P16BE = 96 |> Int32
const AV_PIX_FMT_YUVA422P16LE = 97 |> Int32
const AV_PIX_FMT_YUVA444P16BE = 98 |> Int32
const AV_PIX_FMT_YUVA444P16LE = 99 |> Int32
const AV_PIX_FMT_VDPAU = 100 |> Int32
const AV_PIX_FMT_XYZ12LE = 101 |> Int32
const AV_PIX_FMT_XYZ12BE = 102 |> Int32
const AV_PIX_FMT_NV16 = 103 |> Int32
const AV_PIX_FMT_NV20LE = 104 |> Int32
const AV_PIX_FMT_NV20BE = 105 |> Int32
const AV_PIX_FMT_RGBA64BE = 106 |> Int32
const AV_PIX_FMT_RGBA64LE = 107 |> Int32
const AV_PIX_FMT_BGRA64BE = 108 |> Int32
const AV_PIX_FMT_BGRA64LE = 109 |> Int32
const AV_PIX_FMT_YVYU422 = 110 |> Int32
const AV_PIX_FMT_YA16BE = 111 |> Int32
const AV_PIX_FMT_YA16LE = 112 |> Int32
const AV_PIX_FMT_GBRAP = 113 |> Int32
const AV_PIX_FMT_GBRAP16BE = 114 |> Int32
const AV_PIX_FMT_GBRAP16LE = 115 |> Int32
const AV_PIX_FMT_QSV = 116 |> Int32
const AV_PIX_FMT_MMAL = 117 |> Int32
const AV_PIX_FMT_D3D11VA_VLD = 118 |> Int32
const AV_PIX_FMT_CUDA = 119 |> Int32
const AV_PIX_FMT_0RGB = 120 |> Int32
const AV_PIX_FMT_RGB0 = 121 |> Int32
const AV_PIX_FMT_0BGR = 122 |> Int32
const AV_PIX_FMT_BGR0 = 123 |> Int32
const AV_PIX_FMT_YUV420P12BE = 124 |> Int32
const AV_PIX_FMT_YUV420P12LE = 125 |> Int32
const AV_PIX_FMT_YUV420P14BE = 126 |> Int32
const AV_PIX_FMT_YUV420P14LE = 127 |> Int32
const AV_PIX_FMT_YUV422P12BE = 128 |> Int32
const AV_PIX_FMT_YUV422P12LE = 129 |> Int32
const AV_PIX_FMT_YUV422P14BE = 130 |> Int32
const AV_PIX_FMT_YUV422P14LE = 131 |> Int32
const AV_PIX_FMT_YUV444P12BE = 132 |> Int32
const AV_PIX_FMT_YUV444P12LE = 133 |> Int32
const AV_PIX_FMT_YUV444P14BE = 134 |> Int32
const AV_PIX_FMT_YUV444P14LE = 135 |> Int32
const AV_PIX_FMT_GBRP12BE = 136 |> Int32
const AV_PIX_FMT_GBRP12LE = 137 |> Int32
const AV_PIX_FMT_GBRP14BE = 138 |> Int32
const AV_PIX_FMT_GBRP14LE = 139 |> Int32
const AV_PIX_FMT_YUVJ411P = 140 |> Int32
const AV_PIX_FMT_BAYER_BGGR8 = 141 |> Int32
const AV_PIX_FMT_BAYER_RGGB8 = 142 |> Int32
const AV_PIX_FMT_BAYER_GBRG8 = 143 |> Int32
const AV_PIX_FMT_BAYER_GRBG8 = 144 |> Int32
const AV_PIX_FMT_BAYER_BGGR16LE = 145 |> Int32
const AV_PIX_FMT_BAYER_BGGR16BE = 146 |> Int32
const AV_PIX_FMT_BAYER_RGGB16LE = 147 |> Int32
const AV_PIX_FMT_BAYER_RGGB16BE = 148 |> Int32
const AV_PIX_FMT_BAYER_GBRG16LE = 149 |> Int32
const AV_PIX_FMT_BAYER_GBRG16BE = 150 |> Int32
const AV_PIX_FMT_BAYER_GRBG16LE = 151 |> Int32
const AV_PIX_FMT_BAYER_GRBG16BE = 152 |> Int32
const AV_PIX_FMT_XVMC = 153 |> Int32
const AV_PIX_FMT_YUV440P10LE = 154 |> Int32
const AV_PIX_FMT_YUV440P10BE = 155 |> Int32
const AV_PIX_FMT_YUV440P12LE = 156 |> Int32
const AV_PIX_FMT_YUV440P12BE = 157 |> Int32
const AV_PIX_FMT_AYUV64LE = 158 |> Int32
const AV_PIX_FMT_AYUV64BE = 159 |> Int32
const AV_PIX_FMT_VIDEOTOOLBOX = 160 |> Int32
const AV_PIX_FMT_P010LE = 161 |> Int32
const AV_PIX_FMT_P010BE = 162 |> Int32
const AV_PIX_FMT_GBRAP12BE = 163 |> Int32
const AV_PIX_FMT_GBRAP12LE = 164 |> Int32
const AV_PIX_FMT_GBRAP10BE = 165 |> Int32
const AV_PIX_FMT_GBRAP10LE = 166 |> Int32
const AV_PIX_FMT_MEDIACODEC = 167 |> Int32
const AV_PIX_FMT_GRAY12BE = 168 |> Int32
const AV_PIX_FMT_GRAY12LE = 169 |> Int32
const AV_PIX_FMT_GRAY10BE = 170 |> Int32
const AV_PIX_FMT_GRAY10LE = 171 |> Int32
const AV_PIX_FMT_P016LE = 172 |> Int32
const AV_PIX_FMT_P016BE = 173 |> Int32
const AV_PIX_FMT_D3D11 = 174 |> Int32
const AV_PIX_FMT_GRAY9BE = 175 |> Int32
const AV_PIX_FMT_GRAY9LE = 176 |> Int32
const AV_PIX_FMT_GBRPF32BE = 177 |> Int32
const AV_PIX_FMT_GBRPF32LE = 178 |> Int32
const AV_PIX_FMT_GBRAPF32BE = 179 |> Int32
const AV_PIX_FMT_GBRAPF32LE = 180 |> Int32
const AV_PIX_FMT_DRM_PRIME = 181 |> Int32
const AV_PIX_FMT_OPENCL = 182 |> Int32
const AV_PIX_FMT_GRAY14BE = 183 |> Int32
const AV_PIX_FMT_GRAY14LE = 184 |> Int32
const AV_PIX_FMT_GRAYF32BE = 185 |> Int32
const AV_PIX_FMT_GRAYF32LE = 186 |> Int32
const AV_PIX_FMT_NB = 187 |> Int32
# end enum AVPixelFormat

macro AV_PIX_FMT_NE(be, le)
    Symbol("AV_PIX_FMT_"*string(le))
end
const AV_PIX_FMT_RGB32 = @AV_PIX_FMT_NE(ARGB, BGRA)
const AV_PIX_FMT_RGB32_1 = @AV_PIX_FMT_NE(RGBA, ABGR)
const AV_PIX_FMT_BGR32 = @AV_PIX_FMT_NE(ABGR, RGBA)
const AV_PIX_FMT_BGR32_1 = @AV_PIX_FMT_NE(BGRA, ARGB)
const AV_PIX_FMT_0RGB32 = @AV_PIX_FMT_NE(0RGB, BGR0)
const AV_PIX_FMT_0BGR32 = @AV_PIX_FMT_NE(0BGR, RGB0)
const AV_PIX_FMT_GRAY9 = @AV_PIX_FMT_NE(GRAY9BE, GRAY9LE)
const AV_PIX_FMT_GRAY10 = @AV_PIX_FMT_NE(GRAY10BE, GRAY10LE)
const AV_PIX_FMT_GRAY12 = @AV_PIX_FMT_NE(GRAY12BE, GRAY12LE)
const AV_PIX_FMT_GRAY14 = @AV_PIX_FMT_NE(GRAY14BE, GRAY14LE)
const AV_PIX_FMT_GRAY16 = @AV_PIX_FMT_NE(GRAY16BE, GRAY16LE)
const AV_PIX_FMT_YA16 = @AV_PIX_FMT_NE(YA16BE, YA16LE)
const AV_PIX_FMT_RGB48 = @AV_PIX_FMT_NE(RGB48BE, RGB48LE)
const AV_PIX_FMT_RGB565 = @AV_PIX_FMT_NE(RGB565BE, RGB565LE)
const AV_PIX_FMT_RGB555 = @AV_PIX_FMT_NE(RGB555BE, RGB555LE)
const AV_PIX_FMT_RGB444 = @AV_PIX_FMT_NE(RGB444BE, RGB444LE)
const AV_PIX_FMT_RGBA64 = @AV_PIX_FMT_NE(RGBA64BE, RGBA64LE)
const AV_PIX_FMT_BGR48 = @AV_PIX_FMT_NE(BGR48BE, BGR48LE)
const AV_PIX_FMT_BGR565 = @AV_PIX_FMT_NE(BGR565BE, BGR565LE)
const AV_PIX_FMT_BGR555 = @AV_PIX_FMT_NE(BGR555BE, BGR555LE)
const AV_PIX_FMT_BGR444 = @AV_PIX_FMT_NE(BGR444BE, BGR444LE)
const AV_PIX_FMT_BGRA64 = @AV_PIX_FMT_NE(BGRA64BE, BGRA64LE)
const AV_PIX_FMT_YUV420P9 = @AV_PIX_FMT_NE(YUV420P9BE, YUV420P9LE)
const AV_PIX_FMT_YUV422P9 = @AV_PIX_FMT_NE(YUV422P9BE, YUV422P9LE)
const AV_PIX_FMT_YUV444P9 = @AV_PIX_FMT_NE(YUV444P9BE, YUV444P9LE)
const AV_PIX_FMT_YUV420P10 = @AV_PIX_FMT_NE(YUV420P10BE, YUV420P10LE)
const AV_PIX_FMT_YUV422P10 = @AV_PIX_FMT_NE(YUV422P10BE, YUV422P10LE)
const AV_PIX_FMT_YUV440P10 = @AV_PIX_FMT_NE(YUV440P10BE, YUV440P10LE)
const AV_PIX_FMT_YUV444P10 = @AV_PIX_FMT_NE(YUV444P10BE, YUV444P10LE)
const AV_PIX_FMT_YUV420P12 = @AV_PIX_FMT_NE(YUV420P12BE, YUV420P12LE)
const AV_PIX_FMT_YUV422P12 = @AV_PIX_FMT_NE(YUV422P12BE, YUV422P12LE)
const AV_PIX_FMT_YUV440P12 = @AV_PIX_FMT_NE(YUV440P12BE, YUV440P12LE)
const AV_PIX_FMT_YUV444P12 = @AV_PIX_FMT_NE(YUV444P12BE, YUV444P12LE)
const AV_PIX_FMT_YUV420P14 = @AV_PIX_FMT_NE(YUV420P14BE, YUV420P14LE)
const AV_PIX_FMT_YUV422P14 = @AV_PIX_FMT_NE(YUV422P14BE, YUV422P14LE)
const AV_PIX_FMT_YUV444P14 = @AV_PIX_FMT_NE(YUV444P14BE, YUV444P14LE)
const AV_PIX_FMT_YUV420P16 = @AV_PIX_FMT_NE(YUV420P16BE, YUV420P16LE)
const AV_PIX_FMT_YUV422P16 = @AV_PIX_FMT_NE(YUV422P16BE, YUV422P16LE)
const AV_PIX_FMT_YUV444P16 = @AV_PIX_FMT_NE(YUV444P16BE, YUV444P16LE)
const AV_PIX_FMT_GBRP9 = @AV_PIX_FMT_NE(GBRP9BE, GBRP9LE)
const AV_PIX_FMT_GBRP10 = @AV_PIX_FMT_NE(GBRP10BE, GBRP10LE)
const AV_PIX_FMT_GBRP12 = @AV_PIX_FMT_NE(GBRP12BE, GBRP12LE)
const AV_PIX_FMT_GBRP14 = @AV_PIX_FMT_NE(GBRP14BE, GBRP14LE)
const AV_PIX_FMT_GBRP16 = @AV_PIX_FMT_NE(GBRP16BE, GBRP16LE)
const AV_PIX_FMT_GBRAP10 = @AV_PIX_FMT_NE(GBRAP10BE, GBRAP10LE)
const AV_PIX_FMT_GBRAP12 = @AV_PIX_FMT_NE(GBRAP12BE, GBRAP12LE)
const AV_PIX_FMT_GBRAP16 = @AV_PIX_FMT_NE(GBRAP16BE, GBRAP16LE)
const AV_PIX_FMT_BAYER_BGGR16 = @AV_PIX_FMT_NE(BAYER_BGGR16BE, BAYER_BGGR16LE)
const AV_PIX_FMT_BAYER_RGGB16 = @AV_PIX_FMT_NE(BAYER_RGGB16BE, BAYER_RGGB16LE)
const AV_PIX_FMT_BAYER_GBRG16 = @AV_PIX_FMT_NE(BAYER_GBRG16BE, BAYER_GBRG16LE)
const AV_PIX_FMT_BAYER_GRBG16 = @AV_PIX_FMT_NE(BAYER_GRBG16BE, BAYER_GRBG16LE)
const AV_PIX_FMT_GBRPF32 = @AV_PIX_FMT_NE(GBRPF32BE, GBRPF32LE)
const AV_PIX_FMT_GBRAPF32 = @AV_PIX_FMT_NE(GBRAPF32BE, GBRAPF32LE)
const AV_PIX_FMT_GRAYF32 = @AV_PIX_FMT_NE(GRAYF32BE, GRAYF32LE)
const AV_PIX_FMT_YUVA420P9 = @AV_PIX_FMT_NE(YUVA420P9BE, YUVA420P9LE)
const AV_PIX_FMT_YUVA422P9 = @AV_PIX_FMT_NE(YUVA422P9BE, YUVA422P9LE)
const AV_PIX_FMT_YUVA444P9 = @AV_PIX_FMT_NE(YUVA444P9BE, YUVA444P9LE)
const AV_PIX_FMT_YUVA420P10 = @AV_PIX_FMT_NE(YUVA420P10BE, YUVA420P10LE)
const AV_PIX_FMT_YUVA422P10 = @AV_PIX_FMT_NE(YUVA422P10BE, YUVA422P10LE)
const AV_PIX_FMT_YUVA444P10 = @AV_PIX_FMT_NE(YUVA444P10BE, YUVA444P10LE)
const AV_PIX_FMT_YUVA420P16 = @AV_PIX_FMT_NE(YUVA420P16BE, YUVA420P16LE)
const AV_PIX_FMT_YUVA422P16 = @AV_PIX_FMT_NE(YUVA422P16BE, YUVA422P16LE)
const AV_PIX_FMT_YUVA444P16 = @AV_PIX_FMT_NE(YUVA444P16BE, YUVA444P16LE)
const AV_PIX_FMT_XYZ12 = @AV_PIX_FMT_NE(XYZ12BE, XYZ12LE)
const AV_PIX_FMT_NV20 = @AV_PIX_FMT_NE(NV20BE, NV20LE)
const AV_PIX_FMT_AYUV64 = @AV_PIX_FMT_NE(AYUV64BE, AYUV64LE)
const AV_PIX_FMT_P010 = @AV_PIX_FMT_NE(P010BE, P010LE)
const AV_PIX_FMT_P016 = @AV_PIX_FMT_NE(P016BE, P016LE)

# begin enum AVColorPrimaries
const AVColorPrimaries = UInt32
const AVCOL_PRI_RESERVED0 = 0 |> UInt32
const AVCOL_PRI_BT709 = 1 |> UInt32
const AVCOL_PRI_UNSPECIFIED = 2 |> UInt32
const AVCOL_PRI_RESERVED = 3 |> UInt32
const AVCOL_PRI_BT470M = 4 |> UInt32
const AVCOL_PRI_BT470BG = 5 |> UInt32
const AVCOL_PRI_SMPTE170M = 6 |> UInt32
const AVCOL_PRI_SMPTE240M = 7 |> UInt32
const AVCOL_PRI_FILM = 8 |> UInt32
const AVCOL_PRI_BT2020 = 9 |> UInt32
const AVCOL_PRI_SMPTE428 = 10 |> UInt32
const AVCOL_PRI_SMPTEST428_1 = 10 |> UInt32
const AVCOL_PRI_SMPTE431 = 11 |> UInt32
const AVCOL_PRI_SMPTE432 = 12 |> UInt32
const AVCOL_PRI_JEDEC_P22 = 22 |> UInt32
const AVCOL_PRI_NB = 23 |> UInt32
# end enum AVColorPrimaries

# begin enum AVColorTransferCharacteristic
const AVColorTransferCharacteristic = UInt32
const AVCOL_TRC_RESERVED0 = 0 |> UInt32
const AVCOL_TRC_BT709 = 1 |> UInt32
const AVCOL_TRC_UNSPECIFIED = 2 |> UInt32
const AVCOL_TRC_RESERVED = 3 |> UInt32
const AVCOL_TRC_GAMMA22 = 4 |> UInt32
const AVCOL_TRC_GAMMA28 = 5 |> UInt32
const AVCOL_TRC_SMPTE170M = 6 |> UInt32
const AVCOL_TRC_SMPTE240M = 7 |> UInt32
const AVCOL_TRC_LINEAR = 8 |> UInt32
const AVCOL_TRC_LOG = 9 |> UInt32
const AVCOL_TRC_LOG_SQRT = 10 |> UInt32
const AVCOL_TRC_IEC61966_2_4 = 11 |> UInt32
const AVCOL_TRC_BT1361_ECG = 12 |> UInt32
const AVCOL_TRC_IEC61966_2_1 = 13 |> UInt32
const AVCOL_TRC_BT2020_10 = 14 |> UInt32
const AVCOL_TRC_BT2020_12 = 15 |> UInt32
const AVCOL_TRC_SMPTE2084 = 16 |> UInt32
const AVCOL_TRC_SMPTEST2084 = 16 |> UInt32
const AVCOL_TRC_SMPTE428 = 17 |> UInt32
const AVCOL_TRC_SMPTEST428_1 = 17 |> UInt32
const AVCOL_TRC_ARIB_STD_B67 = 18 |> UInt32
const AVCOL_TRC_NB = 19 |> UInt32
# end enum AVColorTransferCharacteristic

# begin enum AVColorSpace
const AVColorSpace = UInt32
const AVCOL_SPC_RGB = 0 |> UInt32
const AVCOL_SPC_BT709 = 1 |> UInt32
const AVCOL_SPC_UNSPECIFIED = 2 |> UInt32
const AVCOL_SPC_RESERVED = 3 |> UInt32
const AVCOL_SPC_FCC = 4 |> UInt32
const AVCOL_SPC_BT470BG = 5 |> UInt32
const AVCOL_SPC_SMPTE170M = 6 |> UInt32
const AVCOL_SPC_SMPTE240M = 7 |> UInt32
const AVCOL_SPC_YCGCO = 8 |> UInt32
const AVCOL_SPC_YCOCG = 8 |> UInt32
const AVCOL_SPC_BT2020_NCL = 9 |> UInt32
const AVCOL_SPC_BT2020_CL = 10 |> UInt32
const AVCOL_SPC_SMPTE2085 = 11 |> UInt32
const AVCOL_SPC_CHROMA_DERIVED_NCL = 12 |> UInt32
const AVCOL_SPC_CHROMA_DERIVED_CL = 13 |> UInt32
const AVCOL_SPC_ICTCP = 14 |> UInt32
const AVCOL_SPC_NB = 15 |> UInt32
# end enum AVColorSpace

# begin enum AVColorRange
const AVColorRange = UInt32
const AVCOL_RANGE_UNSPECIFIED = 0 |> UInt32
const AVCOL_RANGE_MPEG = 1 |> UInt32
const AVCOL_RANGE_JPEG = 2 |> UInt32
const AVCOL_RANGE_NB = 3 |> UInt32
# end enum AVColorRange

# begin enum AVChromaLocation
const AVChromaLocation = UInt32
const AVCHROMA_LOC_UNSPECIFIED = 0 |> UInt32
const AVCHROMA_LOC_LEFT = 1 |> UInt32
const AVCHROMA_LOC_CENTER = 2 |> UInt32
const AVCHROMA_LOC_TOPLEFT = 3 |> UInt32
const AVCHROMA_LOC_TOP = 4 |> UInt32
const AVCHROMA_LOC_BOTTOMLEFT = 5 |> UInt32
const AVCHROMA_LOC_BOTTOM = 6 |> UInt32
const AVCHROMA_LOC_NB = 7 |> UInt32
# end enum AVChromaLocation

# begin enum AVSampleFormat
const AVSampleFormat = Cint
const AV_SAMPLE_FMT_NONE = -1 |> Int32
const AV_SAMPLE_FMT_U8 = 0 |> Int32
const AV_SAMPLE_FMT_S16 = 1 |> Int32
const AV_SAMPLE_FMT_S32 = 2 |> Int32
const AV_SAMPLE_FMT_FLT = 3 |> Int32
const AV_SAMPLE_FMT_DBL = 4 |> Int32
const AV_SAMPLE_FMT_U8P = 5 |> Int32
const AV_SAMPLE_FMT_S16P = 6 |> Int32
const AV_SAMPLE_FMT_S32P = 7 |> Int32
const AV_SAMPLE_FMT_FLTP = 8 |> Int32
const AV_SAMPLE_FMT_DBLP = 9 |> Int32
const AV_SAMPLE_FMT_S64 = 10 |> Int32
const AV_SAMPLE_FMT_S64P = 11 |> Int32
const AV_SAMPLE_FMT_NB = 12 |> Int32
# end enum AVSampleFormat

# Skipping MacroDefinition: AV_VERSION_INT ( a , b , c ) ( ( a ) << 16 | ( b ) << 8 | ( c ) )
# Skipping MacroDefinition: AV_VERSION_DOT ( a , b , c ) a ## . ## b ## . ## c
# Skipping MacroDefinition: AV_VERSION ( a , b , c ) AV_VERSION_DOT ( a , b , c )
# Skipping MacroDefinition: AV_VERSION_MAJOR ( a ) ( ( a ) >> 16 )
# Skipping MacroDefinition: AV_VERSION_MINOR ( a ) ( ( ( a ) & 0x00FF00 ) >> 8 )
# Skipping MacroDefinition: AV_VERSION_MICRO ( a ) ( ( a ) & 0xFF )

const LIBAVUTIL_VERSION_MAJOR = 56
const LIBAVUTIL_VERSION_MINOR = 22
const LIBAVUTIL_VERSION_MICRO = 100

# Skipping MacroDefinition: LIBAVUTIL_VERSION_INT AV_VERSION_INT ( LIBAVUTIL_VERSION_MAJOR , LIBAVUTIL_VERSION_MINOR , LIBAVUTIL_VERSION_MICRO )
# Skipping MacroDefinition: LIBAVUTIL_VERSION AV_VERSION ( LIBAVUTIL_VERSION_MAJOR , LIBAVUTIL_VERSION_MINOR , LIBAVUTIL_VERSION_MICRO )

# const LIBAVUTIL_BUILD = LIBAVUTIL_VERSION_INT

# Skipping MacroDefinition: LIBAVUTIL_IDENT "Lavu" AV_STRINGIFY ( LIBAVUTIL_VERSION )
# Skipping MacroDefinition: FF_API_VAAPI ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_FRAME_QP ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_PLUS1_MINUS1 ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_ERROR_FRAME ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_PKT_PTS ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_CRYPTO_SIZE_T ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_FRAME_GET_SET ( LIBAVUTIL_VERSION_MAJOR < 57 )
# Skipping MacroDefinition: FF_API_PSEUDOPAL ( LIBAVUTIL_VERSION_MAJOR < 57 )

const AES_CTR_KEY_SIZE = 16
const AES_CTR_IV_SIZE = 8

struct AVAESCTR
end

struct AVAudioFifo
end

struct AVCAMELLIA
end

struct AVCAST5
end

const AV_CH_FRONT_LEFT = 0x00000001
const AV_CH_FRONT_RIGHT = 0x00000002
const AV_CH_FRONT_CENTER = 0x00000004
const AV_CH_LOW_FREQUENCY = 0x00000008
const AV_CH_BACK_LEFT = 0x00000010
const AV_CH_BACK_RIGHT = 0x00000020
const AV_CH_FRONT_LEFT_OF_CENTER = 0x00000040
const AV_CH_FRONT_RIGHT_OF_CENTER = 0x00000080
const AV_CH_BACK_CENTER = 0x00000100
const AV_CH_SIDE_LEFT = 0x00000200
const AV_CH_SIDE_RIGHT = 0x00000400
const AV_CH_TOP_CENTER = 0x00000800
const AV_CH_TOP_FRONT_LEFT = 0x00001000
const AV_CH_TOP_FRONT_CENTER = 0x00002000
const AV_CH_TOP_FRONT_RIGHT = 0x00004000
const AV_CH_TOP_BACK_LEFT = 0x00008000
const AV_CH_TOP_BACK_CENTER = 0x00010000
const AV_CH_TOP_BACK_RIGHT = 0x00020000
const AV_CH_STEREO_LEFT = 0x20000000
const AV_CH_STEREO_RIGHT = 0x40000000
const AV_CH_WIDE_LEFT = UInt64(0x0000000080000000)
const AV_CH_WIDE_RIGHT = UInt64(0x0000000100000000)
const AV_CH_SURROUND_DIRECT_LEFT = UInt64(0x0000000200000000)
const AV_CH_SURROUND_DIRECT_RIGHT = UInt64(0x0000000400000000)
const AV_CH_LOW_FREQUENCY_2 = UInt64(0x0000000800000000)
const AV_CH_LAYOUT_NATIVE = UInt64(0x8000000000000000)
const AV_CH_LAYOUT_MONO = AV_CH_FRONT_CENTER
const AV_CH_LAYOUT_STEREO = AV_CH_FRONT_LEFT | AV_CH_FRONT_RIGHT
const AV_CH_LAYOUT_2POINT1 = AV_CH_LAYOUT_STEREO | AV_CH_LOW_FREQUENCY
const AV_CH_LAYOUT_2_1 = AV_CH_LAYOUT_STEREO | AV_CH_BACK_CENTER
const AV_CH_LAYOUT_SURROUND = AV_CH_LAYOUT_STEREO | AV_CH_FRONT_CENTER
const AV_CH_LAYOUT_3POINT1 = AV_CH_LAYOUT_SURROUND | AV_CH_LOW_FREQUENCY
const AV_CH_LAYOUT_4POINT0 = AV_CH_LAYOUT_SURROUND | AV_CH_BACK_CENTER
const AV_CH_LAYOUT_4POINT1 = AV_CH_LAYOUT_4POINT0 | AV_CH_LOW_FREQUENCY
const AV_CH_LAYOUT_2_2 = (AV_CH_LAYOUT_STEREO | AV_CH_SIDE_LEFT) | AV_CH_SIDE_RIGHT
const AV_CH_LAYOUT_QUAD = (AV_CH_LAYOUT_STEREO | AV_CH_BACK_LEFT) | AV_CH_BACK_RIGHT
const AV_CH_LAYOUT_5POINT0 = (AV_CH_LAYOUT_SURROUND | AV_CH_SIDE_LEFT) | AV_CH_SIDE_RIGHT
const AV_CH_LAYOUT_5POINT1 = AV_CH_LAYOUT_5POINT0 | AV_CH_LOW_FREQUENCY
const AV_CH_LAYOUT_5POINT0_BACK = (AV_CH_LAYOUT_SURROUND | AV_CH_BACK_LEFT) | AV_CH_BACK_RIGHT
const AV_CH_LAYOUT_5POINT1_BACK = AV_CH_LAYOUT_5POINT0_BACK | AV_CH_LOW_FREQUENCY
const AV_CH_LAYOUT_6POINT0 = AV_CH_LAYOUT_5POINT0 | AV_CH_BACK_CENTER
const AV_CH_LAYOUT_6POINT0_FRONT = (AV_CH_LAYOUT_2_2 | AV_CH_FRONT_LEFT_OF_CENTER) | AV_CH_FRONT_RIGHT_OF_CENTER
const AV_CH_LAYOUT_HEXAGONAL = AV_CH_LAYOUT_5POINT0_BACK | AV_CH_BACK_CENTER
const AV_CH_LAYOUT_6POINT1 = AV_CH_LAYOUT_5POINT1 | AV_CH_BACK_CENTER
const AV_CH_LAYOUT_6POINT1_BACK = AV_CH_LAYOUT_5POINT1_BACK | AV_CH_BACK_CENTER
const AV_CH_LAYOUT_6POINT1_FRONT = AV_CH_LAYOUT_6POINT0_FRONT | AV_CH_LOW_FREQUENCY
const AV_CH_LAYOUT_7POINT0 = (AV_CH_LAYOUT_5POINT0 | AV_CH_BACK_LEFT) | AV_CH_BACK_RIGHT
const AV_CH_LAYOUT_7POINT0_FRONT = (AV_CH_LAYOUT_5POINT0 | AV_CH_FRONT_LEFT_OF_CENTER) | AV_CH_FRONT_RIGHT_OF_CENTER
const AV_CH_LAYOUT_7POINT1 = (AV_CH_LAYOUT_5POINT1 | AV_CH_BACK_LEFT) | AV_CH_BACK_RIGHT
const AV_CH_LAYOUT_7POINT1_WIDE = (AV_CH_LAYOUT_5POINT1 | AV_CH_FRONT_LEFT_OF_CENTER) | AV_CH_FRONT_RIGHT_OF_CENTER
const AV_CH_LAYOUT_7POINT1_WIDE_BACK = (AV_CH_LAYOUT_5POINT1_BACK | AV_CH_FRONT_LEFT_OF_CENTER) | AV_CH_FRONT_RIGHT_OF_CENTER
const AV_CH_LAYOUT_OCTAGONAL = ((AV_CH_LAYOUT_5POINT0 | AV_CH_BACK_LEFT) | AV_CH_BACK_CENTER) | AV_CH_BACK_RIGHT
const AV_CH_LAYOUT_HEXADECAGONAL = (((((((AV_CH_LAYOUT_OCTAGONAL | AV_CH_WIDE_LEFT) | AV_CH_WIDE_RIGHT) | AV_CH_TOP_BACK_LEFT) | AV_CH_TOP_BACK_RIGHT) | AV_CH_TOP_BACK_CENTER) | AV_CH_TOP_FRONT_CENTER) | AV_CH_TOP_FRONT_LEFT) | AV_CH_TOP_FRONT_RIGHT
const AV_CH_LAYOUT_STEREO_DOWNMIX = AV_CH_STEREO_LEFT | AV_CH_STEREO_RIGHT

# begin enum AVMatrixEncoding
const AVMatrixEncoding = UInt32
const AV_MATRIX_ENCODING_NONE = 0 |> UInt32
const AV_MATRIX_ENCODING_DOLBY = 1 |> UInt32
const AV_MATRIX_ENCODING_DPLII = 2 |> UInt32
const AV_MATRIX_ENCODING_DPLIIX = 3 |> UInt32
const AV_MATRIX_ENCODING_DPLIIZ = 4 |> UInt32
const AV_MATRIX_ENCODING_DOLBYEX = 5 |> UInt32
const AV_MATRIX_ENCODING_DOLBYHEADPHONE = 6 |> UInt32
const AV_MATRIX_ENCODING_NB = 7 |> UInt32
# end enum AVMatrixEncoding

struct AVBPrint
end

struct AVDES
    round_keys::NTuple{3, NTuple{16, UInt64}}
    triple_des::Cint
end

# begin enum AVDownmixType
const AVDownmixType = UInt32
const AV_DOWNMIX_TYPE_UNKNOWN = 0 |> UInt32
const AV_DOWNMIX_TYPE_LORO = 1 |> UInt32
const AV_DOWNMIX_TYPE_LTRT = 2 |> UInt32
const AV_DOWNMIX_TYPE_DPLII = 3 |> UInt32
const AV_DOWNMIX_TYPE_NB = 4 |> UInt32
# end enum AVDownmixType

struct AVDownmixInfo
    preferred_downmix_type::AVDownmixType
    center_mix_level::Cdouble
    center_mix_level_ltrt::Cdouble
    surround_mix_level::Cdouble
    surround_mix_level_ltrt::Cdouble
    lfe_mix_level::Cdouble
end

struct AVSubsampleEncryptionInfo
    bytes_of_clear_data::UInt32
    bytes_of_protected_data::UInt32
end

struct AVEncryptionInfo
    scheme::UInt32
    crypt_byte_block::UInt32
    skip_byte_block::UInt32
    key_id::Ptr{UInt8}
    key_id_size::UInt32
    iv::Ptr{UInt8}
    iv_size::UInt32
    subsamples::Ptr{AVSubsampleEncryptionInfo}
    subsample_count::UInt32
end

struct AVEncryptionInitInfo
    system_id::Ptr{UInt8}
    system_id_size::UInt32
    key_ids::Ptr{Ptr{UInt8}}
    num_key_ids::UInt32
    key_id_size::UInt32
    data::Ptr{UInt8}
    data_size::UInt32
    next::Ptr{AVEncryptionInitInfo}
end

const AV_HASH_MAX_SIZE = 64

struct AVHashContext
end

# begin enum AVHWDeviceType
const AVHWDeviceType = UInt32
const AV_HWDEVICE_TYPE_NONE = 0 |> UInt32
const AV_HWDEVICE_TYPE_VDPAU = 1 |> UInt32
const AV_HWDEVICE_TYPE_CUDA = 2 |> UInt32
const AV_HWDEVICE_TYPE_VAAPI = 3 |> UInt32
const AV_HWDEVICE_TYPE_DXVA2 = 4 |> UInt32
const AV_HWDEVICE_TYPE_QSV = 5 |> UInt32
const AV_HWDEVICE_TYPE_VIDEOTOOLBOX = 6 |> UInt32
const AV_HWDEVICE_TYPE_D3D11VA = 7 |> UInt32
const AV_HWDEVICE_TYPE_DRM = 8 |> UInt32
const AV_HWDEVICE_TYPE_OPENCL = 9 |> UInt32
const AV_HWDEVICE_TYPE_MEDIACODEC = 10 |> UInt32
# end enum AVHWDeviceType

struct AVHWDeviceInternal
end

struct AVHWDeviceContext
    av_class::Ptr{AVClass}
    internal::Ptr{AVHWDeviceInternal}
    _type::AVHWDeviceType
    hwctx::Ptr{Cvoid}
    free::Ptr{Cvoid}
    user_opaque::Ptr{Cvoid}
end

struct AVHWFramesInternal
end

struct AVHWFramesContext
    av_class::Ptr{AVClass}
    internal::Ptr{AVHWFramesInternal}
    device_ref::Ptr{AVBufferRef}
    device_ctx::Ptr{AVHWDeviceContext}
    hwctx::Ptr{Cvoid}
    free::Ptr{Cvoid}
    user_opaque::Ptr{Cvoid}
    pool::Ptr{AVBufferPool}
    initial_pool_size::Cint
    format::AVPixelFormat
    sw_format::AVPixelFormat
    width::Cint
    height::Cint
end

# begin enum AVHWFrameTransferDirection
const AVHWFrameTransferDirection = UInt32
const AV_HWFRAME_TRANSFER_DIRECTION_FROM = 0 |> UInt32
const AV_HWFRAME_TRANSFER_DIRECTION_TO = 1 |> UInt32
# end enum AVHWFrameTransferDirection

struct AVHWFramesConstraints
    valid_hw_formats::Ptr{AVPixelFormat}
    valid_sw_formats::Ptr{AVPixelFormat}
    min_width::Cint
    min_height::Cint
    max_width::Cint
    max_height::Cint
end

# begin enum ANONYMOUS_3
const ANONYMOUS_3 = UInt32
const AV_HWFRAME_MAP_READ = 1 |> UInt32
const AV_HWFRAME_MAP_WRITE = 2 |> UInt32
const AV_HWFRAME_MAP_OVERWRITE = 4 |> UInt32
const AV_HWFRAME_MAP_DIRECT = 8 |> UInt32
# end enum ANONYMOUS_3

struct AVCUDADeviceContextInternal
end

struct AVCUDADeviceContext
    cuda_ctx::Cint
    stream::Cint
    internal::Ptr{AVCUDADeviceContextInternal}
end

struct AVD3D11VADeviceContext
    device::Ptr{Cint}
    device_context::Ptr{Cint}
    video_device::Ptr{Cint}
    video_context::Ptr{Cint}
    lock::Ptr{Cvoid}
    unlock::Ptr{Cvoid}
    lock_ctx::Ptr{Cvoid}
end

struct AVD3D11FrameDescriptor
    texture::Ptr{Cint}
    index::Cint
end

struct AVD3D11VAFramesContext
    texture::Ptr{Cint}
    BindFlags::Cint
    MiscFlags::Cint
end

# begin enum ANONYMOUS_4
const ANONYMOUS_4 = UInt32
const AV_DRM_MAX_PLANES = 4 |> UInt32
# end enum ANONYMOUS_4

struct AVDRMObjectDescriptor
    fd::Cint
    size::Csize_t
    format_modifier::UInt64
end

struct AVDRMPlaneDescriptor
    object_index::Cint
    offset::Cptrdiff_t
    pitch::Cptrdiff_t
end

struct AVDRMLayerDescriptor
    format::UInt32
    nb_planes::Cint
    planes::NTuple{4, AVDRMPlaneDescriptor}
end

struct AVDRMFrameDescriptor
    nb_objects::Cint
    objects::NTuple{4, AVDRMObjectDescriptor}
    nb_layers::Cint
    layers::NTuple{4, AVDRMLayerDescriptor}
end

struct AVDRMDeviceContext
    fd::Cint
end

struct AVDXVA2DeviceContext
    devmgr::Ptr{Cint}
end

struct AVDXVA2FramesContext
    surface_type::Cint
    surfaces::Ptr{Ptr{Cint}}
    nb_surfaces::Cint
    decoder_to_release::Ptr{Cint}
end

struct AVMediaCodecDeviceContext
    surface::Ptr{Cvoid}
end

struct AVQSVDeviceContext
    session::Cint
end

struct AVQSVFramesContext
    surfaces::Ptr{Cint}
    nb_surfaces::Cint
    frame_type::Cint
end

# begin enum ANONYMOUS_5
const ANONYMOUS_5 = UInt32
const AV_VAAPI_DRIVER_QUIRK_USER_SET = 1 |> UInt32
const AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS = 2 |> UInt32
const AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE = 4 |> UInt32
const AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES = 8 |> UInt32
# end enum ANONYMOUS_5

# struct AVVAAPIDeviceContext
#     display::VADisplay
#     driver_quirks::UInt32
# end

# struct AVVAAPIFramesContext
#     attributes::Ptr{VASurfaceAttrib}
#     nb_attributes::Cint
#     surface_ids::Ptr{VASurfaceID}
#     nb_surfaces::Cint
# end

# struct AVVAAPIHWConfig
#     config_id::VAConfigID
# end

# struct AVVDPAUDeviceContext
#     device::VdpDevice
#     get_proc_address::Ptr{VdpGetProcAddress}
# end

struct AVMasteringDisplayMetadata
    display_primaries::NTuple{3, NTuple{2, AVRational}}
    white_point::NTuple{2, AVRational}
    min_luminance::AVRational
    max_luminance::AVRational
    has_primaries::Cint
    has_luminance::Cint
end

struct AVContentLightMetadata
    MaxCLL::UInt32
    MaxFALL::UInt32
end

struct AVMotionVector
    source::Int32
    w::UInt8
    h::UInt8
    src_x::Int16
    src_y::Int16
    dst_x::Int16
    dst_y::Int16
    flags::UInt64
    motion_x::Int32
    motion_y::Int32
    motion_scale::UInt16
end

const AV_OPT_FLAG_ENCODING_PARAM = 1
const AV_OPT_FLAG_DECODING_PARAM = 2
const AV_OPT_FLAG_AUDIO_PARAM = 8
const AV_OPT_FLAG_VIDEO_PARAM = 16
const AV_OPT_FLAG_SUBTITLE_PARAM = 32
const AV_OPT_FLAG_EXPORT = 64
const AV_OPT_FLAG_READONLY = 128
const AV_OPT_FLAG_BSF_PARAM = 1 << 8
const AV_OPT_FLAG_FILTERING_PARAM = 1 << 16
const AV_OPT_FLAG_DEPRECATED = 1 << 17
const AV_OPT_SEARCH_CHILDREN = 1 << 0
const AV_OPT_SEARCH_FAKE_OBJ = 1 << 1
const AV_OPT_ALLOW_NULL = 1 << 2
const AV_OPT_MULTI_COMPONENT_RANGE = 1 << 12

# Skipping MacroDefinition: av_opt_set_int_list ( obj , name , val , term , flags ) ( av_int_list_length ( val , term ) > INT_MAX / sizeof ( * ( val ) ) ? AVERROR ( EINVAL ) : av_opt_set_bin ( obj , name , ( const uint8_t * ) ( val ) , av_int_list_length ( val , term ) * sizeof ( * ( val ) ) , flags ) )

const AV_OPT_SERIALIZE_SKIP_DEFAULTS = 0x00000001
const AV_OPT_SERIALIZE_OPT_FLAGS_EXACT = 0x00000002

# begin enum ANONYMOUS_6
const ANONYMOUS_6 = UInt32
const AV_OPT_FLAG_IMPLICIT_KEY = 1 |> UInt32
# end enum ANONYMOUS_6

const av_pixelutils_sad_fn = Ptr{Cvoid}

struct AVRC4
    state::NTuple{256, UInt8}
    x::Cint
    y::Cint
end

struct AVReplayGain
    track_gain::Int32
    track_peak::UInt32
    album_gain::Int32
    album_peak::UInt32
end

# begin enum AVSphericalProjection
const AVSphericalProjection = UInt32
const AV_SPHERICAL_EQUIRECTANGULAR = 0 |> UInt32
const AV_SPHERICAL_CUBEMAP = 1 |> UInt32
const AV_SPHERICAL_EQUIRECTANGULAR_TILE = 2 |> UInt32
# end enum AVSphericalProjection

struct AVSphericalMapping
    projection::AVSphericalProjection
    yaw::Int32
    pitch::Int32
    roll::Int32
    bound_left::UInt32
    bound_top::UInt32
    bound_right::UInt32
    bound_bottom::UInt32
    padding::UInt32
end

const AV_STEREO3D_FLAG_INVERT = 1 << 0

# begin enum AVStereo3DType
const AVStereo3DType = UInt32
const AV_STEREO3D_2D = 0 |> UInt32
const AV_STEREO3D_SIDEBYSIDE = 1 |> UInt32
const AV_STEREO3D_TOPBOTTOM = 2 |> UInt32
const AV_STEREO3D_FRAMESEQUENCE = 3 |> UInt32
const AV_STEREO3D_CHECKERBOARD = 4 |> UInt32
const AV_STEREO3D_SIDEBYSIDE_QUINCUNX = 5 |> UInt32
const AV_STEREO3D_LINES = 6 |> UInt32
const AV_STEREO3D_COLUMNS = 7 |> UInt32
# end enum AVStereo3DType

# begin enum AVStereo3DView
const AVStereo3DView = UInt32
const AV_STEREO3D_VIEW_PACKED = 0 |> UInt32
const AV_STEREO3D_VIEW_LEFT = 1 |> UInt32
const AV_STEREO3D_VIEW_RIGHT = 2 |> UInt32
# end enum AVStereo3DView

struct AVStereo3D
    _type::AVStereo3DType
    flags::Cint
    view::AVStereo3DView
end

struct AVTEA
end

struct AVThreadMessageQueue
end

# begin enum AVThreadMessageFlags
const AVThreadMessageFlags = UInt32
const AV_THREAD_MESSAGE_NONBLOCK = 1 |> UInt32
# end enum AVThreadMessageFlags

const AV_TIMECODE_STR_SIZE = 23

# begin enum AVTimecodeFlag
const AVTimecodeFlag = UInt32
const AV_TIMECODE_FLAG_DROPFRAME = 1 |> UInt32
const AV_TIMECODE_FLAG_24HOURSMAX = 2 |> UInt32
const AV_TIMECODE_FLAG_ALLOWNEGATIVE = 4 |> UInt32
# end enum AVTimecodeFlag

const AVTimecode = 

struct AVTreeNode
end

struct AVTWOFISH
end

struct AVXTEA
    key::NTuple{16, UInt32}
end
