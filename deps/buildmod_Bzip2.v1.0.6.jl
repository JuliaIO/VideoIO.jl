using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbz2"], :libbzip2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/Bzip2-v1.0.6-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-gnu.tar.gz", "af379832d78ac31420c2f6d2f9127e4816420161ff798f62e8e2fafb33a4e997"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-musl.tar.gz", "f35c376f27c710753c0fc083cfd54e19e395a4d4db02b2bf690558df7da77039"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-gnueabihf.tar.gz", "4a3d276fa7e9ff33879790ca0e6094839b54ca0e901e91b6cd74e4573dc66bd6"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-musleabihf.tar.gz", "77670d9276461d50397b4954396e3a63e379c9920c564e1f0521ee03ae1388c4"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-gnu.tar.gz", "f72141f9e754b45ddbabc84f7e7b51f08d1abcb4b0896d4652fa4c7f7268823c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-musl.tar.gz", "6dfe13bb21b461383609eac26e6f0254ca1ce2291ec81c31de0fcc65723669ff"),
    Windows(:i686) => ("$bin_prefix/Bzip2.v1.0.6.i686-w64-mingw32.tar.gz", "5d5c74c8d66d76dae93d0d13c4f0ff4f87b32197b9e57ec64b1ebfb01e862878"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.powerpc64le-linux-gnu.tar.gz", "fed7deb75b2c5e0e981edc8ea8f7da9d1e7d90a38276b84b301e27453c8b20e0"),
    MacOS(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-apple-darwin14.tar.gz", "bbe8e0486c8efd5b9b4e619a65f2a41e6c91f996e9eb4d4e9322e97ed3f43883"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-gnu.tar.gz", "cdba6476604bf604e8126e2528c42ed2125f1d88441e9633c63da8f6392ea34a"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-musl.tar.gz", "5a58e929388d54659eccbf85d4e5266aad3d3fbce38ddc3e6186a669443b5b86"),
    FreeBSD(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-unknown-freebsd11.1.tar.gz", "5851d99e15fae4c6bb4cc57d804ef8e71faf09dd154e658a700d155c61945da6"),
    Windows(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-w64-mingw32.tar.gz", "28b4c4302df28db44076bbe19618e265234440e5a2406f7c8d75a79017427a29"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
