using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "ffmpeg", :ffmpeg),
    ExecutableProduct(prefix, "ffprobe", :ffprobe),
    ExecutableProduct(prefix, "x264", :x264),
    ExecutableProduct(prefix, "x265", :x265),
    LibraryProduct(prefix, ["libavformat","avformat"], :libavformat),
    LibraryProduct(prefix, ["libavcodec","avcodec"], :libavcodec),
    LibraryProduct(prefix, ["libavutil","avutil"], :libavutil),
    LibraryProduct(prefix, ["libpostproc","postproc"], :libpostproc),
    LibraryProduct(prefix, ["libswresample","swresample"], :libswresample),
    LibraryProduct(prefix, ["libavdevice","avdevice"], :libavdevice),
    LibraryProduct(prefix, ["libavresample","avresample"], :libavresample),
    LibraryProduct(prefix, ["libavfilter","avfilter"], :libavfilter),
    LibraryProduct(prefix, ["libswscale","swscale"], :libswscale),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaIO/FFMPEGBuilder/releases/download/v4.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.aarch64-linux-gnu.tar.gz", "db42dd5c63d0b61748907f72df7f4331ae4cd2899a3a59f199a4a29337e014a2"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.aarch64-linux-musl.tar.gz", "a4cb1b45d671fa46dcc1b81abf4798a37023d02b273db4bca0ffd6b106f99888"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FFMPEG.v4.1.0.arm-linux-gnueabihf.tar.gz", "264242501221be150b5a1cc6ca21a784ef887c6191d6e9be09d930e9afbb2969"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FFMPEG.v4.1.0.arm-linux-musleabihf.tar.gz", "f6de5bcc3e18a87b7f3953d60d5126862c31cae3694786515b66964028d296ec"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.i686-linux-gnu.tar.gz", "f982a81e08f478ca624fc4475f0322f7e641df81ae6a380503322c4fe06f60ed"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.i686-linux-musl.tar.gz", "bbf5b45e162c4b550071afd90272b8c84f41dfcaca6b42d88692889391f02b56"),
    Windows(:i686) => ("$bin_prefix/FFMPEG.v4.1.0.i686-w64-mingw32.tar.gz", "2e668cd701c5b85a020ab8e60f7df86d0cc4652b522183fd7379ea1b4c880889"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.powerpc64le-linux-gnu.tar.gz", "d428dacbd49bcde13d1421b15fba229dc32fa30bcac5b4a5d749ba4d264b1a47"),
    MacOS(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-apple-darwin14.tar.gz", "d543ce12626523cf66d857b8c7e130459d7c5e7393fa65c9ff315918c700f1e1"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-linux-gnu.tar.gz", "106ca4783839e55fb369a9c2823134333deda8543df523d759097bf5fa3bbfd6"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-linux-musl.tar.gz", "ac0bd1fdd19ade701c174daa788df6e26c70f45d12c7aedfab31193db57dd334"),
    FreeBSD(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-unknown-freebsd11.1.tar.gz", "fbf21d817f82f75c6c1e8688243d3febc12a9869ef7b1558ac0b8ab749e60e9b"),
    Windows(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-w64-mingw32.tar.gz", "021361bd1eb171f08063ef8eccf95f8ba539121e507dd45ba73969e2bf445c09"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
