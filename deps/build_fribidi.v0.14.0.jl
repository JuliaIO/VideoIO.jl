using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libfribidi"], :libfribidi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/SimonDanisch/FribidiBuilder/releases/download/0.14.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/fribidi.v0.14.0.aarch64-linux-gnu.tar.gz", "16f15718114336ec9e42c35f3d8d8fb4b72c0cfc1cf12fa5a0e83f5b0a5cff95"),
    Linux(:aarch64, :musl) => ("$bin_prefix/fribidi.v0.14.0.aarch64-linux-musl.tar.gz", "5d89aefea96eabf0344623569ca0a680f6dda2404733e1f008f3b89ae24d31d7"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/fribidi.v0.14.0.arm-linux-gnueabihf.tar.gz", "397a7974f00141d1562c750c602c7e7930c07160015e0a2b06fd5cc8e392168e"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/fribidi.v0.14.0.arm-linux-musleabihf.tar.gz", "4ccdae7e8cd781b00991c30e51c1d34f3767dd079d5f24ed2ae3a18f00acc351"),
    Linux(:i686, :glibc) => ("$bin_prefix/fribidi.v0.14.0.i686-linux-gnu.tar.gz", "6f328185849c2ecead87530825be68e9188082f4cf6745c2166187978f37b3bd"),
    Linux(:i686, :musl) => ("$bin_prefix/fribidi.v0.14.0.i686-linux-musl.tar.gz", "8486d46e2ac4c31748bdf2f494e4d962f2b983ce35e1647cfac3b670c5d7a5a8"),
    Windows(:i686) => ("$bin_prefix/fribidi.v0.14.0.i686-w64-mingw32.tar.gz", "01aab3e9eea76b981d2b5c171904665e15a432a2f4eeb40b59a0799f94f82a44"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/fribidi.v0.14.0.powerpc64le-linux-gnu.tar.gz", "e550c301295ae456bfdb3d29289295498a2eeb204534d399cb99bb6869e161e3"),
    MacOS(:x86_64) => ("$bin_prefix/fribidi.v0.14.0.x86_64-apple-darwin14.tar.gz", "0afce704dc0ac0bab3b0a273da7ec1437e8379f905ad362484860371d072ff57"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/fribidi.v0.14.0.x86_64-linux-gnu.tar.gz", "f5f74f927bd43c3c13dd090904b808d8921687f58f9277a6c11afc4b27dcbeb9"),
    Linux(:x86_64, :musl) => ("$bin_prefix/fribidi.v0.14.0.x86_64-linux-musl.tar.gz", "36a2cd8b6d650c18fa9abf279f4427904201fcc76d01ac9777ca0ec7b87fe7aa"),
    FreeBSD(:x86_64) => ("$bin_prefix/fribidi.v0.14.0.x86_64-unknown-freebsd11.1.tar.gz", "8e3007c4e1431b8b8fc43f634f26a0afad56bc47ffa7f7c72e8360e21bc23821"),
    Windows(:x86_64) => ("$bin_prefix/fribidi.v0.14.0.x86_64-w64-mingw32.tar.gz", "b36f165fcb6c6d71f2283b941da6fef21139d6a750fdd3fea92b8d95b73df98d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps_codec.jl"), products)
